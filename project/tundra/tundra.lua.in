----------------------------------------------------------------------------
--
-- Upcaste Performance Libraries
-- Copyright (C) 2012-2013 Jesse W. Towner
--
-- Permission is hereby granted, free of charge, to any person obtaining
-- a copy of this software and associated documentation files (the
-- "Software"), to deal in the Software without restriction, including
-- without limitation the rights to use, copy, modify, merge, publish,
-- distribute, sublicense, and/or sell copies of the Software, and to
-- permit persons to whom the Software is furnished to do so, subject to
-- the following conditions:
--
-- The above copyright notice and this permission notice shall be
-- included in all copies or substantial portions of the Software.
--
-- THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-- EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-- MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
-- IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
-- CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
-- TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
-- SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--
----------------------------------------------------------------------------

local GlobExtension = require("tundra.syntax.glob")

local CommonCC = {
    ReplaceEnv = {
        OBJECTROOT = "build",
        CPPDEFS_SILVER = "",
        CPPDEFS_GOLD = "",
        CPPDEFS_PLATINUM = "",
        CCOPTS_SILVER = "",
        CCOPTS_GOLD = "",
        CCOPTS_RELEASE = "",
        CXXOPTS_SILVER = "",
        CXXOPTS_GOLD = "",
        CXXOPTS_PLATINUM = "",
    },
    Env = {
        CPPPATH = { "." },
        CPPDEFS = {
            { "_DEBUG", "UP_DEBUG"; Config = "*-*-debug-*" },
            { "NDEBUG", "UP_RELEASE"; Config = "*-*-release-*" },
            { "NDEBUG", "UP_SILVER"; Config = "*-*-silver-*" },
            { "NDEBUG", "UP_GOLD"; Config = "*-*-gold-*" },
            { "NDEBUG", "UP_PLATINUM"; Config = "*-*-platinum-*" },
            { "UP_LINKAGE_STATIC"; Config = "*-*-*-static" },
            { "UP_LINKAGE_SHARED"; Config = "*-*-*-shared" },
            { "UP_NO_PROLOG_TARGET_HEADER"; Config = "*-msvc-*-*" }
        },
    },
}

local CommonClang = {
    Inherit = CommonCC,
    Env = {
        CXXOPTS = {
            { "-g"; Config = "*-*-debug-*" },
            { "-O2"; Config = { "*-*-release-*", "*-*-silver-*", "*-*-gold-*", "*-*-platinum-*" } },
            "-std=gnu++11", "-Wall", "-Wextra", "-Werror",
            "-fcolor-diagnostics", "-fvisibility=hidden", "-fvisibility-inlines-hidden", "-ffast-math",
            { "-fpic"; Config = "*-*-*-shared" },
            { "-fcxx-exceptions", "-fexceptions", "-frtti"; Config = { "*-*-debug-*", "*-*-release-*", "*-*-gold-*" } },
            { "-fno-cxx-exceptions", "-fno-exceptions", "-fno-rtti"; Config = { "*-*-silver-*", "*-*-platinum-*" } },
            { "-fomit-frame-pointer"; Config = { "*-*-gold-*", "*-*-platinum-*" } },
        },
    },
}

local CommonGCC = {
    Inherit = CommonCC,
    Env = {
        CXXOPTS = {
            { "-Wa,-a=$(@).s"; Config = { "*-*-gold-*", "*-*-platinum-*" } },
            { "-g"; Config = "*-*-debug-*" },
            { "-O2"; Config = { "*-*-release-*", "*-*-silver-*", "*-*-gold-*", "*-*-platinum-*" } },
            "-std=gnu++0x", "-Wall", "-Wextra", "-Werror",
            "-fabi-version=6", "-fvisibility=hidden", "-fvisibility-inlines-hidden", "-ffast-math",
            { "-fpic"; Config = "*-*-*-shared" },
            { "-fexceptions", "-frtti"; Config = { "*-*-debug-*", "*-*-release-*", "*-*-gold-*" } },
            { "-fno-exceptions", "-fno-rtti"; Config = { "*-*-silver-*", "*-*-platinum-*" } },
            { "-fomit-frame-pointer", "-s"; Config = { "*-*-gold-*", "*-*-platinum-*" } },
        },
        PROGOPTS = {
            "-fabi-version=6",
        }
    },
}

Build {
    EngineOptions = {
        FileHashSize = 14791,
        RelationHashSize = 29789,
        UseDagCaching = 1,
    },
    Configs = {
        Config {
            Name = "linux-clang",
            Inherit = CommonClang,
            Tools = { "clang-osx", "gas" },
        },
        Config {
            Name = "linux-gcc",
            Inherit = CommonGCC,
            DefaultOnHost = "linux",
            Env = { CXXOPTS = { "-D_GNU_SOURCE" } },
            Tools = { "gcc", "gas" },
        },
        Config {
            Name = "ios-gcc",
            Inherit = CommonGCC,
            Tools = { "gcc-osx", "gas" },
        },
        Config {
            Name = "macosx-gcc",
            Inherit = CommonGCC,
            DefaultOnHost = "macosx",
            Tools = { "gcc-osx", "gas" },
        },
        Config {
            Name = "win32-msvc",
            DefaultOnHost = "windows",
            Tools = { "msvc"; TargetArch = "x86" },
        },
        Config {
            Name = "win64-msvc",
            Tools = { "msvc"; TargetArch = "x64" },
        },
    },
    Variants = {
        { Name = "debug" },
        { Name = "release" },
        { Name = "silver" },
        { Name = "gold" },
        { Name = "platinum" },
    },
    DefaultVariant = "debug",
    SubVariants = {
        "static",
        "shared",
    },
    DefaultSubVariant = "static",
    Units = function()
        -- Copies the given table
        local function CopyTable(t)
            local r = {}
            for k,v in pairs(t) do
                r[k] = v
            end
            return r
        end

        -- Gets additional CXXOPTS depending given unit configuration
        local function GetCxxOptions(arg)
            local result = { }
            if arg.ForceExceptions then
                table.insert(result, { "-fcxx-exceptions", "-fexceptions", "-frtti"; Config = "*-clang-*" })
                table.insert(result, { "-fexceptions", "-frtti"; Config = "*-gcc-*" })
            end
            return result
        end

        -- Recursively globs for source files relevant to current build-id
        local function SourceGlob(dir)
            return FGlob {
                Dir = dir,
                Extensions = { ".c", ".cpp", ".s" },
                Filters = {
                    { Pattern = "/clang/"; Config = "*-clang-*-*" },
                    { Pattern = "/gcc/"; Config = "*-gcc-*-*" },
                    { Pattern = "/msvc/"; Config = "*-mscv-*-*" },
                    { Pattern = "/linux/"; Config = "linux-*" },
                    { Pattern = "/darwin/"; Config = { "macosx-*", "ios-*" } },
                    { Pattern = "/ios/"; Config = "ios-*" },
                    { Pattern = "/macosx/"; Config = "macosx-*" },
                    { Pattern = "/posix/"; Config = { "linux-*", "macosx-*" } },
                    { Pattern = "/windows/"; Config = { "win32-*", "win64-*" } },
                }
            }
        end

        -- Wrapper for generating shared & static library units
        local function Library(arg)
            setmetatable(arg, {__index = { Depends = {}, ForceExceptions = false }})

            local result = {}

            local data = {
                Depends = arg.Depends,
                Defines = { { "LIB" .. string.upper(arg.Name) .. "_EXPORT_SYMBOLS"; Config = "*-*-*-shared" }, },
                Env = { CXXOPTS = GetCxxOptions(arg), },
                Includes = { "include/" .. arg.Name },
                Propagate = { Includes = { "include/" .. arg.Name }, },
                Sources = { SourceGlob("src/" .. arg.Name .. "/src") },
            }
            
            local shared_data = CopyTable(data)
            shared_data.Name = arg.Name
            shared_data.Config = "*-*-*-shared"
            result[1] = SharedLibrary(shared_data)

            local static_data = CopyTable(data)
            static_data.Name = arg.Name .. "-static"
            static_data.Target = "$(OBJECTROOT)/$(BUILD_ID)/$(LIBPREFIX)" .. arg.Name .. "$(LIBSUFFIX)"
            static_data.Config = "*-*-*-static"
            result[2] = StaticLibrary(static_data)

            return result
        end

        --
        -- Unit definitions
        --

        local standard = ExternalLibrary {
            Name = "standard",
            Propagate = {
                Libs = {
                    { "c", "stdc++", "pthread", "rt"; Config = "linux-*" },
                },
            },
        }

        local upcore = Library { Name = "upcore", Depends = { standard } }
        local uptest = Library { Name = "uptest", Depends = { upcore, standard }, ForceExceptions = true }
 
        local upcore_tests = Program {
            Name = "upcore_tests",
            Depends = { uptest, upcore, standard },
            Sources = { "src/uptest/driver/console_driver.cpp", SourceGlob "src/upcore/test" },
        }

        local upcore_bench = Program {
            Name = "upcore_bench",
            Depends = { uptest, upcore, standard },
            Sources = { "src/uptest/driver/console_driver.cpp", SourceGlob "src/upcore/bench" },
        }

        Default(upcore_tests)
        Default(upcore_bench)
    end,
}

