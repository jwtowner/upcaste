----------------------------------------------------------------------------
--
-- Upcaste Performance Libraries
-- Copyright (C) 2012-2013 Jesse W. Towner
--
-- Permission is hereby granted, free of charge, to any person obtaining
-- a copy of this software and associated documentation files (the
-- "Software"), to deal in the Software without restriction, including
-- without limitation the rights to use, copy, modify, merge, publish,
-- distribute, sublicense, and/or sell copies of the Software, and to
-- permit persons to whom the Software is furnished to do so, subject to
-- the following conditions:
--
-- The above copyright notice and this permission notice shall be
-- included in all copies or substantial portions of the Software.
--
-- THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-- EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-- MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
-- IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
-- CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
-- TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
-- SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--
----------------------------------------------------------------------------

local GlobExtension = require("tundra.syntax.glob")

local CommonCC = {
    ReplaceEnv = {
        OBJECTROOT = "build",
        CPPDEFS_SILVER = "",
        CPPDEFS_GOLD = "",
        CPPDEFS_PLATINUM = "",
        CCOPTS_SILVER = "",
        CCOPTS_GOLD = "",
        CCOPTS_RELEASE = "",
        CXXOPTS_SILVER = "",
        CXXOPTS_GOLD = "",
        CXXOPTS_PLATINUM = "",
    },
    Env = {
        CPPPATH = { "." },
        CPPDEFS = {
            { "_DEBUG", "UP_DEBUG"; Config = "*-*-debug-*" },
            { "NDEBUG", "UP_RELEASE"; Config = "*-*-release-*" },
            { "NDEBUG", "UP_SILVER"; Config = "*-*-silver-*" },
            { "NDEBUG", "UP_GOLD"; Config = "*-*-gold-*" },
            { "NDEBUG", "UP_PLATINUM"; Config = "*-*-platinum-*" },
            { "UP_LINKAGE_STATIC"; Config = "*-*-*-static" },
            { "UP_LINKAGE_SHARED"; Config = "*-*-*-shared" },
            { "UP_NO_PROLOG_TARGET_HEADER"; Config = "*-msvc-*-*" }
        },
    },
}

local CommonClang = {
    Inherit = CommonCC,
    Env = {
        CXXOPTS = {
            { "--analyze"; Config = "*-*-*-analyze" },
            { "-g"; Config = "*-*-debug-*" },
            { "-O2"; Config = { "*-*-release-*", "*-*-silver-*", "*-*-gold-*", "*-*-platinum-*" } },
            "-std=gnu99", "-Wall", "-Wextra", "-Werror", "-fcolor-diagnostics",
            "-fvisibility=hidden", "-fvisibility-inlines-hidden", "-ffast-math",
            { "-fpic"; Config = "*-*-*-shared" },
            { "-fomit-frame-pointer"; Config = { "*-*-gold-*", "*-*-platinum-*" } },
        },
        CXXOPTS = {
            { "--analyze"; Config = "*-*-*-analyze" },
            { "-g"; Config = "*-*-debug-*" },
            { "-O2"; Config = { "*-*-release-*", "*-*-silver-*", "*-*-gold-*", "*-*-platinum-*" } },
            "-std=gnu++11", "-Wall", "-Wextra", "-Werror", "-fcolor-diagnostics",
            "-fvisibility=hidden", "-fvisibility-inlines-hidden", "-ffast-math",
            { "-fpic"; Config = "*-*-*-shared" },
            { "-fcxx-exceptions", "-fexceptions", "-frtti"; Config = { "*-*-debug-*", "*-*-release-*", "*-*-gold-*" } },
            { "-fno-cxx-exceptions", "-fno-exceptions", "-fno-rtti"; Config = { "*-*-silver-*", "*-*-platinum-*" } },
            { "-fomit-frame-pointer"; Config = { "*-*-gold-*", "*-*-platinum-*" } },
        },
    },
}

local CommonGCC = {
    Inherit = CommonCC,
    Env = {
        CCOPTS = {
            { "-Wa,-a=$(@).s"; Config = { "*-*-gold-*", "*-*-platinum-*" } },
            { "-g"; Config = "*-*-debug-*" },
            { "-O2"; Config = { "*-*-release-*", "*-*-silver-*", "*-*-gold-*", "*-*-platinum-*" } },
            "-std=gnu99", "-Wall", "-Wextra", "-Werror",
            "-fvisibility=hidden", "-fvisibility-inlines-hidden", "-ffast-math",
            { "-fpic"; Config = "*-*-*-shared" },
            { "-fomit-frame-pointer", "-s"; Config = { "*-*-gold-*", "*-*-platinum-*" } },
        },
        CXXOPTS = {
            { "-Wa,-a=$(@).s"; Config = { "*-*-gold-*", "*-*-platinum-*" } },
            { "-g"; Config = "*-*-debug-*" },
            { "-O2"; Config = { "*-*-release-*", "*-*-silver-*", "*-*-gold-*", "*-*-platinum-*" } },
            "-std=gnu++0x", "-Wall", "-Wextra", "-Werror",
            "-fabi-version=0", "-fvisibility=hidden", "-fvisibility-inlines-hidden", "-ffast-math",
            { "-fpic"; Config = "*-*-*-shared" },
            { "-fexceptions", "-frtti"; Config = { "*-*-debug-*", "*-*-release-*", "*-*-gold-*" } },
            { "-fno-exceptions", "-fno-rtti"; Config = { "*-*-silver-*", "*-*-platinum-*" } },
            { "-fomit-frame-pointer", "-s"; Config = { "*-*-gold-*", "*-*-platinum-*" } },
        },
        PROGOPTS = {
            "-fabi-version=0",
        }
    },
}

local Gas_i686_Configs = { }
local Gas_x86_64_Configs = { }
local GlibcConfigs = { }
local LinuxConfigs = { }
local WindowsConfigs = { }

local GenerateConfig_ParentConfig = {
    clang = CommonClang,
    gcc = CommonGCC,
    msvc = CommonCC,
}

local function CopyTable(t)
    local r = {}
    for k,v in pairs(t) do
        r[k] = v
    end
    return r
end

local function MultiArchConfig(arg)
    local platform_name = arg.Arch
    local operating_system_name = arg.System
    if arg.Kernel and arg.Kernel ~= arg.System then
        platform_name = platform_name .. "_" .. arg.Kernel
        operating_system_name = arg.Kernel .. "-" .. arg.System
    end
    platform_name = platform_name .. "_" .. arg.System

    local config_name = platform_name .. '-' .. arg.Toolset 
    local config_mask = config_name .. "-*"    
    if arg.System == 'gnu' then
        GlibcConfigs[#GlibcConfigs + 1] = config_mask
    end
    if arg.Kernel == 'linux' then
        LinuxConfigs[#LinuxConfigs + 1] = config_mask
    end
    if arg.System == 'windows' then
        WindowsConfigs[#WindowsConfigs + 1] = config_mask
    end
    if arg.Toolset == "clang" or arg.Toolset == "gcc" then
        if arg.Arch == "i686" then
            Gas_i686_Configs[#Gas_i686_Configs + 1] = config_mask
        elseif arg.Arch == "x86_64" then
            Gas_x86_64_Configs[#Gas_x86_64_Configs + 1] = config_mask
        end
    end

    local toolset
    local assembler_options = { }
    local compiler_options = { }
    local linker_options = { }
    if arg.Toolset == "clang" then
        toolset = { "clang-osx", "gas" }
        if arg.Arch == "i686" then
            assembler_options = { "--32" }
            compiler_options = { "-m32", "-march=prescott", "-mtune=generic", "-msse", "-msse2", "-msse3" }
            linker_options = CopyTable(compiler_options)
        elseif arg.Arch == "x86_64" then
            assembler_options = { "--64" }
            compiler_options = { "-m64", "-mtune=generic", "-msse3" }
            linker_options = CopyTable(compiler_options)
        end
    elseif arg.Toolset == "gcc" then
        toolset = { "gcc", "gas" }
        if arg.Arch == "i686" then
            assembler_options = { "--32" }
            compiler_options = { "-m32", "-march=prescott", "-mtune=generic", "-msse", "-msse2", "-msse3", "-mfpmath=sse" }
            linker_options = CopyTable(compiler_options)
        elseif arg.Arch == "x86_64" then
            assembler_options = { "--64" }
            compiler_options = { "-m64", "-mtune=generic", "-msse3" }
            linker_options = CopyTable(compiler_options)
        end
    elseif arg.Toolset == "msvc" then
        if arg.Arch == "i686" then
            toolset = { "msvc"; TargetArch = "x86" }
        else
            toolset = { "msvc"; TargetArch = "x64" }
        end
    end

    local default_on_host = nil
    if arg.Default and arg.Kernel then
        default_on_host = arg.Kernel
    elseif arg.Default then
        default_on_host = arg.System
    end

    return Config {
        Name = platform_name .. '-' .. arg.Toolset,
        Tools = toolset,
        DefaultOnHost = default_on_host,
        Inherit = GenerateConfig_ParentConfig[arg.Toolset],
        Env = {
            ARCH = arg.Arch,
            SYSTEM = arg.System,
            USERLAND = arg.System,
            CPPDEFS = { { "_GNU_SOURCE" ; Config = GlibcConfigs }, },
            ASMOPTS = { assembler_options },
            CCOPTS = { compiler_options },
            CXXOPTS = { compiler_options },
            PROGOPTS = { linker_options },
            SHLIBOPTS = { linker_options },
        }
    }
end

Build {
    EngineOptions = {
        FileHashSize = 14791,
        RelationHashSize = 29789,
        UseDagCaching = 1,
    },
    Configs = {
        MultiArchConfig { Arch = "i686", Kernel = "linux", System = "gnu", Toolset = "clang", Default = @default_config_i686_linux_gnu_clang@ },
        MultiArchConfig { Arch = "x86_64", Kernel = "linux", System = "gnu", Toolset = "clang", Default = @default_config_x86_64_linux_gnu_clang@ },
        MultiArchConfig { Arch = "i686", Kernel = "linux", System = "gnu", Toolset = "gcc", Default = @default_config_i686_linux_gnu_gcc@ },
        MultiArchConfig { Arch = "x86_64", Kernel = "linux", System = "gnu", Toolset = "gcc", Default = @default_config_x86_64_linux_gnu_gcc@ },
        MultiArchConfig { Arch = "i686", System = "windows", Toolset = "msvc", Default = true },
        MultiArchConfig { Arch = "x86_64", System = "windows", Toolset = "msvc", Default = false },
    },
    Variants = {
        { Name = "debug" },
        { Name = "release" },
        { Name = "silver" },
        { Name = "gold" },
        { Name = "platinum" },
    },
    DefaultVariant = "debug",
    SubVariants = {
        "analyze",
        "shared",
        "static",
    },
    DefaultSubVariant = "static",
    Units = function()
        -- Gets additional CXXOPTS depending given unit configuration
        local function GetCxxOptions(arg)
            local result = { }
            if arg.ForceExceptions then
                table.insert(result, { "-fcxx-exceptions", "-fexceptions", "-frtti"; Config = "*-clang-*" })
                table.insert(result, { "-fexceptions", "-frtti"; Config = "*-gcc-*" })
            end
            return result
        end

        -- Recursively globs for source files relevant to current build-id
        local function SourceGlob(dir)
            return FGlob {
                Dir = dir,
                Extensions = { ".c", ".cpp", ".s", ".asm" },
                Filters = {
                    { Pattern = "/gas/i686/"; Config = Gas_i686_Configs },
                    { Pattern = "/gas/x86_64/"; Config = Gas_x86_64_Configs },
                    { Pattern = "/clang/"; Config = "*-clang-*-*" },
                    { Pattern = "/gcc/"; Config = "*-gcc-*-*" },
                    { Pattern = "/msvc/"; Config = "*-mscv-*-*" },
                    { Pattern = "/linux/"; Config = LinuxConfigs },
                    { Pattern = "/ios/"; Config = "ignore" },
                    { Pattern = "/macosx/"; Config = "ignore" },
                    { Pattern = "/posix/"; Config = LinuxConfigs },
                    { Pattern = "/windows/"; Config = WindowsConfigs },
                }
            }
        end

        -- Wrapper for generating library units for current subvariant
        local function UpcasteLibrary(arg)
            setmetatable(arg, {__index = { Depends = {}, ForceExceptions = false }})

            local result = {}

            local data = {
                Depends = arg.Depends,
                Includes = { "include/" .. arg.Name },
                Propagate = { Includes = { "include/" .. arg.Name }, },
                Sources = { SourceGlob("src/" .. arg.Name .. "/src") },
                Env = { CXXOPTS = GetCxxOptions(arg), },
            }
            
            local analyze_data = CopyTable(data)
            analyze_data.Name = arg.Name .. "-analyze"
            analyze_data.Config = "*-*-*-analyze"
            result[1] = ObjGroup(analyze_data)

            local shared_data = CopyTable(data)
            shared_data.Name = arg.Name
            shared_data.Config = "*-*-*-shared"
            shared_data.Defines = { "LIB" .. string.upper(arg.Name) .. "_EXPORT_SYMBOLS" }
            result[2] = SharedLibrary(shared_data)

            local static_data = CopyTable(data)
            static_data.Name = arg.Name .. "-static"
            static_data.Target = "$(OBJECTROOT)/$(BUILD_ID)/$(LIBPREFIX)" .. arg.Name .. "$(LIBSUFFIX)"
            static_data.Config = "*-*-*-static"
            result[3] = StaticLibrary(static_data)

            return result
        end

        -- Wrapper for generating program units for current subvariant
        local function UpcasteProgram(arg)
            setmetatable(arg, {__index = { Depends = {}, ForceExceptions = false }})

            local result = {}

            local data = {
                Depends = arg.Depends,
                Sources = arg.Sources,
                Env = { CXXOPTS = GetCxxOptions(arg), },
            }
            
            local analyze_data = CopyTable(data)
            analyze_data.Name = arg.Name .. "-analyze"
            analyze_data.Config = "*-*-*-analyze"
            result[1] = ObjGroup(analyze_data)

            local program_data = CopyTable(data)
            program_data.Name = arg.Name
            program_data.Config = { "*-*-*-shared", "*-*-*-static" }
            result[2] = Program(program_data)

            return ExternalLibrary {
                Name = arg.Name .. "-dependency-group",
                Depends = result,
            }
        end

        --
        -- Unit definitions
        --

        local standard = ExternalLibrary {
            Name = "standard",
            Propagate = {
                Libs = {
                    { "c", "pthread", "rt", "stdc++"; Config = LinuxConfigs },
                },
            },
        }

        local upcore = UpcasteLibrary { Name = "upcore", Depends = { standard } }
        local uptest = UpcasteLibrary { Name = "uptest", Depends = { upcore, standard }, ForceExceptions = true }
 
        local upcore_tests = UpcasteProgram {
            Name = "upcore_tests",
            Depends = { uptest, upcore, standard },
            Sources = { "src/uptest/driver/console_driver.cpp", SourceGlob "src/upcore/test" },
        }

        local upcore_bench = UpcasteProgram {
            Name = "upcore_bench",
            Depends = { uptest, upcore, standard },
            Sources = { "src/uptest/driver/console_driver.cpp", SourceGlob "src/upcore/bench" },
        }

        Default(upcore_tests)
        Default(upcore_bench)
    end,
}

