{% include "math_header.template" %}
{%- set sint_types=['int8_t','int16_t','int32_t','int64_t'] %}
{%- set uint_types=['uint8_t','uint16_t','uint32_t','uint64_t'] %}
{%- set real_types=['float','double'] %}
{%- set all_types=sint_types + uint_types + real_types %}
#ifndef UP_MATH_MATHFWD_HPP
#define UP_MATH_MATHFWD_HPP

#include <up/cmath.hpp>
#include <up/limits.hpp>
#include <up/utility.hpp>

namespace up { namespace math
{
    template <class T> struct as_floating_point;
    template <> struct LIBUPCOREAPI as_floating_point<int8_t> { typedef float type; };
    template <> struct LIBUPCOREAPI as_floating_point<int16_t> { typedef float type; };
    template <> struct LIBUPCOREAPI as_floating_point<int32_t> { typedef float type; };
    template <> struct LIBUPCOREAPI as_floating_point<int64_t> { typedef double type; };
    template <> struct LIBUPCOREAPI as_floating_point<uint8_t> { typedef float type; };
    template <> struct LIBUPCOREAPI as_floating_point<uint16_t> { typedef float type; };
    template <> struct LIBUPCOREAPI as_floating_point<uint32_t> { typedef float type; };
    template <> struct LIBUPCOREAPI as_floating_point<uint64_t> { typedef double type; };
    template <> struct LIBUPCOREAPI as_floating_point<float> { typedef float type; };
    template <> struct LIBUPCOREAPI as_floating_point<double> { typedef double type; };
 
    template <class T> struct as_signed;
    template <> struct LIBUPCOREAPI as_signed<int8_t> { typedef int8_t type; };
    template <> struct LIBUPCOREAPI as_signed<int16_t> { typedef int16_t type; };
    template <> struct LIBUPCOREAPI as_signed<int32_t> { typedef int32_t type; };
    template <> struct LIBUPCOREAPI as_signed<int64_t> { typedef int64_t type; };
    template <> struct LIBUPCOREAPI as_signed<uint8_t> { typedef int8_t type; };
    template <> struct LIBUPCOREAPI as_signed<uint16_t> { typedef int16_t type; };
    template <> struct LIBUPCOREAPI as_signed<uint32_t> { typedef int32_t type; };
    template <> struct LIBUPCOREAPI as_signed<uint64_t> { typedef int64_t type; };
    template <> struct LIBUPCOREAPI as_signed<float> { typedef int32_t type; };
    template <> struct LIBUPCOREAPI as_signed<double> { typedef int64_t type; };

    template <class T> struct as_unsigned;
    template <> struct LIBUPCOREAPI as_unsigned<int8_t> { typedef uint8_t type; };
    template <> struct LIBUPCOREAPI as_unsigned<int16_t> { typedef uint16_t type; };
    template <> struct LIBUPCOREAPI as_unsigned<int32_t> { typedef uint32_t type; };
    template <> struct LIBUPCOREAPI as_unsigned<int64_t> { typedef uint64_t type; };
    template <> struct LIBUPCOREAPI as_unsigned<uint8_t> { typedef uint8_t type; };
    template <> struct LIBUPCOREAPI as_unsigned<uint16_t> { typedef uint16_t type; };
    template <> struct LIBUPCOREAPI as_unsigned<uint32_t> { typedef uint32_t type; };
    template <> struct LIBUPCOREAPI as_unsigned<uint64_t> { typedef uint64_t type; };
    template <> struct LIBUPCOREAPI as_unsigned<float> { typedef uint32_t type; };
    template <> struct LIBUPCOREAPI as_unsigned<double> { typedef uint64_t type; };

    template <class T> struct make_scalar;
{%- for type in all_types %}
    template <> struct LIBUPCOREAPI make_scalar<{{type}}> { typedef {{type}} type; };
{%- endfor%}

    template <class T, size_t N> struct make_vector;
{%- for type in all_types %}
    template <> struct LIBUPCOREAPI make_vector<{{type}}, 1> { typedef {{type}} type; };
{%- endfor%}

    template <class T, size_t C, size_t R> struct make_matrix;
{%- for type in all_types %}
    template <> struct LIBUPCOREAPI make_matrix<{{type}}, 1, 1> { typedef {{type}} type; };
{%- endfor%}

    template <class T> struct UPVISIBLE vector_step : integral_constant<size_t, 1> { };
    template <class T> struct UPVISIBLE matrix_column_step : integral_constant<size_t, 1> { };
    template <class T> struct UPVISIBLE matrix_row_step : integral_constant<size_t, 1> { };
    template <class T> struct UPVISIBLE is_vector : false_type { };
    template <class T> struct UPVISIBLE is_matrix : false_type { };

    template <class T>
    struct uniform;

    template <class T, class Elem>
    union uniform_constant
    {
        Elem s[matrix_column_step<T>::value * matrix_row_step<T>::value];
        T v;
        UPALWAYSINLINE operator T() const noexcept { return v; }
    };

    template <class Tx, class Elem> struct UPVISIBLE vector_step<uniform_constant<Tx, Elem> > : vector_step<Tx> { };
    template <class Tx, class Elem> struct UPVISIBLE matrix_column_step<uniform_constant<Tx, Elem> > : matrix_column_step<Tx> { };
    template <class Tx, class Elem> struct UPVISIBLE matrix_row_step<uniform_constant<Tx, Elem> > : matrix_row_step<Tx> { };
    template <class Tx, class Elem> struct UPVISIBLE is_vector<uniform_constant<Tx, Elem> > : is_vector<Tx> { };
    template <class Tx, class Elem> struct UPVISIBLE is_matrix<uniform_constant<Tx, Elem> > : is_matrix<Tx> { };
}}

namespace up { namespace math { namespace detail
{
    template <class T>
    struct constructors;

    template
    <
        class To,
        class From,
        bool = sizeof(To) == sizeof(From),
        bool = matrix_column_step<To>::value == matrix_column_step<From>::value,
        bool = matrix_row_step<To>::value == matrix_row_step<From>::value
    >
    struct is_convertible_as_impl : false_type { };

    template <class To, class From> struct is_convertible_as_impl<To, From, true, true, true> : true_type { };
    template <class Tx, class Ux, class E> struct is_convertible_as_impl<Tx, uniform_constant<Ux, E>, true, true, true> : is_convertible_as_impl<Tx, Ux> { };

    template
    <
        class To,
        class From,
        bool = matrix_column_step<To>::value == matrix_column_step<From>::value,
        bool = matrix_row_step<To>::value == matrix_row_step<From>::value
    >
    struct is_convertible_to_impl : false_type { };

    template <class To, class From> struct is_convertible_to_impl<To, From, true, true> : true_type { };
    template <class Tx, class Ux, class E> struct is_convertible_to_impl<Tx, uniform_constant<Ux, E>, true, true> : is_convertible_as_impl<Tx, Ux> { };

    template
    <
        class To,
        class From,
        bool = is_integral<typename make_scalar<To>::type>::value,
        bool = is_floating_point<typename make_scalar<From>::type>::value,
        bool = matrix_column_step<To>::value == matrix_column_step<From>::value,
        bool = matrix_row_step<To>::value == matrix_row_step<From>::value
    >
    struct is_roundable_to_impl : false_type { };

    template <class To, class From> struct is_roundable_to_impl<To, From, true, true, true, true> : true_type { };
    template <class Tx, class Ux, class E> struct is_roundable_to_impl<Tx, uniform_constant<Ux, E>, true, true, true, true> : is_roundable_to_impl<Tx, Ux> { };

    template <class To, class From>
    struct as_impl
    {
        static UPALWAYSINLINE UPPURE
        To convert(From const& v) noexcept {
            union { From a; To b; } r = { v };
            return r.b;
        }
    };

    template <class T>
    struct as_impl<T, T>
    {
        static UPALWAYSINLINE UPPURE
        T convert(T const& v) noexcept {
            return v;
        }
    };
{% for suffix in ['','_rte','_rtz','_rtn','_rtp','_sat','_sat_rte','_sat_rtz','_sat_rtn','_sat_rtp'] %}
    template <class To, class From, size_t = matrix_column_step<To>::value, size_t = matrix_row_step<To>::value> struct generic_convert{{suffix}}_impl;
{%- endfor %}
{%- for suffix in ['','_rte','_rtz','_rtn','_rtp','_sat','_sat_rte','_sat_rtz','_sat_rtn','_sat_rtp'] %}
    template <class T, class U> struct convert{{suffix}}_impl : generic_convert{{suffix}}_impl<T, U> { };
{%- endfor %}
}}}

namespace up { namespace math
{
{%- for name in ['is_convertible_as', 'is_convertible_to', 'is_roundable_to'] %}
    template <class T, class U> struct UPVISIBLE {{name}} : detail::{{name}}_impl<typename decay<T>::type, typename decay<U>::type> { };
{%- endfor %}

    template <class To, class From>
    inline UPALWAYSINLINE UPPURE
    typename enable_if<is_convertible_as<To, From>::value, To>::type as(From&& v) noexcept {
        return detail::as_impl<typename decay<To>::type, typename decay<From>::type>::convert(::up::forward<From>(v));
    }

    template <class To, class From>
    inline UPALWAYSINLINE UPPURE
    typename enable_if<is_convertible_to<To, From>::value, To>::type convert(From&& v) noexcept {
        return detail::convert_impl<typename decay<To>::type, typename decay<From>::type>::convert(::up::forward<From>(v));
    }
{% for suffix in ['rte','rtz','rtn','rtp'] %}
    template <class To, class From>
    inline UPALWAYSINLINE UPPURE
    typename enable_if<is_roundable_to<To, From>::value, To>::type convert_{{suffix}}(From&& v) noexcept {
        return detail::convert_{{suffix}}_impl<typename decay<To>::type, typename decay<From>::type>::convert(::up::forward<From>(v));
    }
{% endfor %}
    template <class To, class From>
    inline UPALWAYSINLINE UPPURE
    typename enable_if<is_convertible_to<To, From>::value, To>::type convert_sat(From&& v) noexcept {
        return detail::convert_impl<typename decay<To>::type, typename decay<From>::type>::convert(::up::forward<From>(v));
    }
{% for suffix in ['rte','rtz','rtn','rtp'] %}
    template <class To, class From>
    inline UPALWAYSINLINE UPPURE 
    typename enable_if<is_roundable_to<To, From>::value, To>::type convert_sat_{{suffix}}(From&& v) noexcept {
        return detail::convert_sat_{{suffix}}_impl<typename decay<To>::type, typename decay<From>::type>::convert(::up::forward<From>(v));
    }
{% endfor -%}
}}

#include <up/math/generic/scalar_operations.inl>

#endif
