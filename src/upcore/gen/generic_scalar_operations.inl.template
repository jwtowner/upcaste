{% include "math_header.template" %}
#ifndef UP_MATH_GENERIC_SCALAR_OPERATIONS_INL
#define UP_MATH_GENERIC_SCALAR_OPERATIONS_INL

#ifndef UP_MATH_MATHFWD_HPP
#   error "Do not include this file directly! Instead include <up/math/mathfwd.hpp>"
#endif

namespace up { namespace math
{
    inline UPALWAYSINLINE UPPURE float fast_ceil(float x) noexcept { return ceil(x); };
    inline UPALWAYSINLINE UPPURE float fast_floor(float x) noexcept { return floor(x); };
    inline UPALWAYSINLINE UPPURE float fast_round(float x) noexcept { return round(x); };
    inline UPALWAYSINLINE UPPURE float fast_trunc(float x) noexcept { return trunc(x); };
    inline UPALWAYSINLINE UPPURE float fast_distance(float x, float y) noexcept { return fabs(y - x); }
    inline UPALWAYSINLINE UPPURE float fast_length(float x) noexcept { return fabs(x); }
    inline UPALWAYSINLINE UPPURE float fast_normalize(float) noexcept { return 1.0f; }
    inline UPALWAYSINLINE UPPURE float fast_rcp(float x) noexcept { return 1.0f / x; }
    inline UPALWAYSINLINE UPPURE float fast_rsqrt(float x) noexcept { return 1.0f / sqrt(x); }
}}

namespace up { namespace math { namespace detail
{
    template <class X, class Y, bool = is_floating_point<X>::value>
    struct generic_convert_sat_helper
    {
        static UPALWAYSINLINE UPPURE
        X convert(Y x) noexcept {
            typedef typename common_type<X, Y>::type ctype;
            ctype const r = static_cast<ctype>(x);

            if (r <= static_cast<ctype>(numeric_limits<X>::min())) {
                return numeric_limits<X>::min();
            }

            if (r >= static_cast<ctype>(numeric_limits<X>::max())) {
                return numeric_limits<X>::max();
            }

            return static_cast<X>(r);
        }
    };

    template <class X, class Y>
    struct generic_convert_sat_helper<X, Y, true>
    {
        static UPALWAYSINLINE UPPURE
        X convert(Y x) noexcept {
            typedef typename common_type<X, Y>::type ctype;
            ctype const r = static_cast<ctype>(x);

            if (r <= static_cast<ctype>(-numeric_limits<X>::max())) {
                return -numeric_limits<X>::max();
            }

            if (r >= static_cast<ctype>(numeric_limits<X>::max())) {
                return numeric_limits<X>::max();
            }

            return static_cast<X>(r);
        }
    };

    template <class To, class From>
    struct generic_convert_impl<To, From, 1, 1>
    {
        static UPALWAYSINLINE UPPURE
        To convert(From x) noexcept {
            return static_cast<To>(x);
        }
    };
{% for suffix, round_func in [('rte','round'),('rtz','trunc'),('rtn','floor'),('rtp','ceil')] %}
    template <class To, class From>
    struct generic_convert_{{suffix}}_impl<To, From, 1, 1>
    {
        static UPALWAYSINLINE UPPURE
        To convert(From x) noexcept {
            return static_cast<To>({{round_func}}(x));
        }
    };
{% endfor %}
    template <class To, class From>
    struct generic_convert_sat_impl<To, From, 1, 1> : generic_convert_sat_helper<To, From> { };
{% for suffix, round_func in [('rte','round'),('rtz','trunc'),('rtn','floor'),('rtp','ceil')] %}
    template <class To, class From>
    struct generic_convert_sat_{{suffix}}_impl<To, From, 1, 1>
    {
        static UPALWAYSINLINE UPPURE
        To convert(From x) noexcept {
            return ::up::math::convert_sat<To>({{round_func}}(x));
        }
    };
{% endfor -%}
}}}

#endif
