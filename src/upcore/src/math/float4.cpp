//
//  Upcaste Performance Libraries
//  Copyright (C) 2012-2013 Jesse W. Towner
//
//  Permission is hereby granted, free of charge, to any person obtaining
//  a copy of this software and associated documentation files (the
//  "Software"), to deal in the Software without restriction, including
//  without limitation the rights to use, copy, modify, merge, publish,
//  distribute, sublicense, and/or sell copies of the Software, and to
//  permit persons to whom the Software is furnished to do so, subject to
//  the following conditions:
//
//  The above copyright notice and this permission notice shall be
//  included in all copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
//  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
//  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
//  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
//  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
//  TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
//  SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//

//
//  Do not edit! This file is automatically generated.
//

#include <up/math/float4.hpp>

namespace up { namespace math
{
/*    extern LIBUPCOREAPI float4 acos(float4_cval_t v) noexcept;
    extern LIBUPCOREAPI float4 acosh(float4_cval_t v) noexcept;
    extern LIBUPCOREAPI float4 acospi(float4_cval_t v) noexcept;
    extern LIBUPCOREAPI float4 asin(float4_cval_t v) noexcept;
    extern LIBUPCOREAPI float4 asinh(float4_cval_t v) noexcept;
    extern LIBUPCOREAPI float4 asinpi(float4_cval_t v) noexcept;
    extern LIBUPCOREAPI float4 atan(float4_cval_t v) noexcept;
    extern LIBUPCOREAPI float4 atanh(float4_cval_t v) noexcept;
    extern LIBUPCOREAPI float4 atanpi(float4_cval_t v) noexcept;
    extern LIBUPCOREAPI float4 cbrt(float4_cval_t v) noexcept;
    extern LIBUPCOREAPI float4 cos(float4_cval_t v) noexcept;
    extern LIBUPCOREAPI float4 cosh(float4_cval_t v) noexcept;
    extern LIBUPCOREAPI float4 cospi(float4_cval_t v) noexcept;
    extern LIBUPCOREAPI float4 erfc(float4_cval_t v) noexcept;
    extern LIBUPCOREAPI float4 erf(float4_cval_t v) noexcept;
    extern LIBUPCOREAPI float4 exp(float4_cval_t v) noexcept;
    extern LIBUPCOREAPI float4 exp2(float4_cval_t v) noexcept;
    extern LIBUPCOREAPI float4 exp10(float4_cval_t v) noexcept;
    extern LIBUPCOREAPI float4 expm1(float4_cval_t v) noexcept;
    extern LIBUPCOREAPI float4 log(float4_cval_t v) noexcept;
    extern LIBUPCOREAPI float4 log2(float4_cval_t v) noexcept;
    extern LIBUPCOREAPI float4 log10(float4_cval_t v) noexcept;
    extern LIBUPCOREAPI float4 log1p(float4_cval_t v) noexcept;
    extern LIBUPCOREAPI float4 logb(float4_cval_t v) noexcept;
    extern LIBUPCOREAPI float4 pow(float4_cval_t v1, float4_cval_t v2) noexcept;
    extern LIBUPCOREAPI float4 pown(float4_cval_t v, int n) noexcept;
    extern LIBUPCOREAPI float4 sin(float4_cval_t v) noexcept;
    extern LIBUPCOREAPI float4 sincos(float4_cval_t v, float4* cosval) noexcept;
    extern LIBUPCOREAPI float4 sinh(float4_cval_t v) noexcept;
    extern LIBUPCOREAPI float4 sinpi(float4_cval_t v) noexcept;
    extern LIBUPCOREAPI float4 tan(float4_cval_t v) noexcept;
    extern LIBUPCOREAPI float4 tanh(float4_cval_t v) noexcept;
    extern LIBUPCOREAPI float4 tanpi(float4_cval_t v) noexcept;
    */
}}
