//
//  Upcaste Performance Libraries
//  Copyright (C) 2012 Jesse W. Towner
//
//  Permission is hereby granted, free of charge, to any person obtaining
//  a copy of this software and associated documentation files (the
//  "Software"), to deal in the Software without restriction, including
//  without limitation the rights to use, copy, modify, merge, publish,
//  distribute, sublicense, and/or sell copies of the Software, and to
//  permit persons to whom the Software is furnished to do so, subject to
//  the following conditions:
//
//  The above copyright notice and this permission notice shall be
//  included in all copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
//  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
//  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
//  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
//  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
//  TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
//  SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//

//
//  Do not edit! This file is automatically generated.
//

#include <up/math/vectors.hpp>

#if UP_COMPILER == UP_COMPILER_GCC
#   pragma GCC diagnostic ignored "-Wmissing-braces"
#endif

namespace up { namespace math
{

    uniform_constant<int4, int32_t> const uniform<int4>::max = { 0x7FFFFFFF, 0x7FFFFFFF, 0x7FFFFFFF, 0x7FFFFFFF };
    uniform_constant<int4, int32_t> const uniform<int4>::min = { 0x80000000, 0x80000000, 0x80000000, 0x80000000 };
    uniform_constant<int4, int32_t> const uniform<int4>::zero = { 0, 0, 0, 0 };
    uniform_constant<int4, int32_t> const uniform<int4>::one = { 1, 1, 1, 1 };
    uniform_constant<int4, int32_t> const uniform<int4>::one_xy = { 1, 1, 0, 0 };
    uniform_constant<int4, int32_t> const uniform<int4>::one_xyz = { 1, 1, 1, 0 };
    uniform_constant<int4, int32_t> const uniform<int4>::identity_x = { 1, 0, 0, 0 };
    uniform_constant<int4, int32_t> const uniform<int4>::identity_y = { 0, 1, 0, 0 };
    uniform_constant<int4, int32_t> const uniform<int4>::identity_z = { 0, 0, 1, 0 };
    uniform_constant<int4, int32_t> const uniform<int4>::identity_w = { 0, 0, 0, 1 };
    uniform_constant<int4, uint32_t> const uniform<int4>::mask_x = { 0xFFFFFFFFu, 0x00000000u, 0x00000000u, 0x00000000u };
    uniform_constant<int4, uint32_t> const uniform<int4>::mask_y = { 0x00000000u, 0xFFFFFFFFu, 0x00000000u, 0x00000000u };
    uniform_constant<int4, uint32_t> const uniform<int4>::mask_z = { 0x00000000u, 0x00000000u, 0xFFFFFFFFu, 0x00000000u };
    uniform_constant<int4, uint32_t> const uniform<int4>::mask_w = { 0x00000000u, 0x00000000u, 0x00000000u, 0xFFFFFFFFu };
    uniform_constant<int4, uint32_t> const uniform<int4>::mask_xy = { 0xFFFFFFFFu, 0xFFFFFFFFu, 0x00000000u, 0x00000000u };
    uniform_constant<int4, uint32_t> const uniform<int4>::mask_xyz = { 0xFFFFFFFFu, 0xFFFFFFFFu, 0xFFFFFFFFu, 0x00000000u };
    uniform_constant<int4, uint32_t> const uniform<int4>::mask_xyzw = { 0xFFFFFFFFu, 0xFFFFFFFFu, 0xFFFFFFFFu, 0xFFFFFFFFu };
#ifdef UP_SIMD_SSE
    uniform_constant<int4, int32_t> const uniform<int4>::rotate_max = { 32, 0, 0, 0 };
#else
    uniform_constant<int4, int32_t> const uniform<int4>::rotate_max = { 32, 32, 32, 32 };
#endif

    uniform_constant<uint4, uint32_t> const uniform<uint4>::max = { 0xFFFFFFFFu, 0xFFFFFFFFu, 0xFFFFFFFFu, 0xFFFFFFFFu };
    uniform_constant<uint4, uint32_t> const uniform<uint4>::zero = { 0u, 0u, 0u, 0u };
    uniform_constant<uint4, uint32_t> const uniform<uint4>::one = { 1u, 1u, 1u, 1u };
    uniform_constant<uint4, uint32_t> const uniform<uint4>::one_xy = { 1u, 1u, 0u, 0u };
    uniform_constant<uint4, uint32_t> const uniform<uint4>::one_xyz = { 1u, 1u, 1u, 0u };
    uniform_constant<uint4, uint32_t> const uniform<uint4>::identity_x = { 1u, 0u, 0u, 0u };
    uniform_constant<uint4, uint32_t> const uniform<uint4>::identity_y = { 0u, 1u, 0u, 0u };
    uniform_constant<uint4, uint32_t> const uniform<uint4>::identity_z = { 0u, 0u, 1u, 0u };
    uniform_constant<uint4, uint32_t> const uniform<uint4>::identity_w = { 0u, 0u, 0u, 1u };
    uniform_constant<uint4, uint32_t> const uniform<uint4>::mask_x = { 0xFFFFFFFFu, 0x00000000u, 0x00000000u, 0x00000000u };
    uniform_constant<uint4, uint32_t> const uniform<uint4>::mask_y = { 0x00000000u, 0xFFFFFFFFu, 0x00000000u, 0x00000000u };
    uniform_constant<uint4, uint32_t> const uniform<uint4>::mask_z = { 0x00000000u, 0x00000000u, 0xFFFFFFFFu, 0x00000000u };
    uniform_constant<uint4, uint32_t> const uniform<uint4>::mask_w = { 0x00000000u, 0x00000000u, 0x00000000u, 0xFFFFFFFFu };
    uniform_constant<uint4, uint32_t> const uniform<uint4>::mask_xy = { 0xFFFFFFFFu, 0xFFFFFFFFu, 0x00000000u, 0x00000000u };
    uniform_constant<uint4, uint32_t> const uniform<uint4>::mask_xyz = { 0xFFFFFFFFu, 0xFFFFFFFFu, 0xFFFFFFFFu, 0x00000000u };
    uniform_constant<uint4, uint32_t> const uniform<uint4>::mask_xyzw = { 0xFFFFFFFFu, 0xFFFFFFFFu, 0xFFFFFFFFu, 0xFFFFFFFFu };
#ifdef UP_SIMD_SSE
    uniform_constant<uint4, uint32_t> const uniform<uint4>::rotate_max = { 32, 0u, 0u, 0u };
#else
    uniform_constant<uint4, uint32_t> const uniform<uint4>::rotate_max = { 32, 32, 32, 32 };
#endif

    uniform_constant<float4, float> const uniform<float4>::max = { FLT_MAX, FLT_MAX, FLT_MAX, FLT_MAX };
    uniform_constant<float4, float> const uniform<float4>::min = { FLT_MIN, FLT_MIN, FLT_MIN, FLT_MIN };
    uniform_constant<float4, float> const uniform<float4>::epsilon = { FLT_EPSILON, FLT_EPSILON, FLT_EPSILON, FLT_EPSILON };
    uniform_constant<float4, uint32_t> const uniform<float4>::one_plus_epsilon = { 0x3F800004u, 0x3F800004u, 0x3F800004u, 0x3F800004u };
    uniform_constant<float4, uint32_t> const uniform<float4>::half_plus_epsilon = { 0x3F000004u, 0x3F000004u, 0x3F000004u, 0x3F000004u };
    uniform_constant<float4, uint32_t> const uniform<float4>::one_minus_epsilon = { 0x3F7FFFFBu, 0x3F7FFFFBu, 0x3F7FFFFBu, 0x3F7FFFFBu };
    uniform_constant<float4, uint32_t> const uniform<float4>::half_minus_epsilon = { 0x3EFFFFFBu, 0x3EFFFFFBu, 0x3EFFFFFBu, 0x3EFFFFFBu };
    uniform_constant<float4, uint32_t> const uniform<float4>::infinity = { 0x7F800000u, 0x7F800000u, 0x7F800000u, 0x7F800000u };
    uniform_constant<float4, uint32_t> const uniform<float4>::quiet_nan = { 0x7FC00000u, 0x7FC00000u, 0x7FC00000u, 0x7FC00000u };
    uniform_constant<float4, float> const uniform<float4>::signed_min = { 0x7FC00000u, 0x7FC00000u, 0x7FC00000u, 0x7FC00000u }; 
    uniform_constant<float4, float> const uniform<float4>::signed_max = { 0x7FC00000u, 0x7FC00000u, 0x7FC00000u, 0x7FC00000u }; 
    uniform_constant<float4, float> const uniform<float4>::unsigned_max = { 0x7FC00000u, 0x7FC00000u, 0x7FC00000u, 0x7FC00000u }; 
    uniform_constant<float4, float> const uniform<float4>::degrees = { FLT_DEGREES, FLT_DEGREES, FLT_DEGREES, FLT_DEGREES };
    uniform_constant<float4, float> const uniform<float4>::radians = { FLT_RADIANS, FLT_RADIANS, FLT_RADIANS, FLT_RADIANS };
    uniform_constant<float4, float> const uniform<float4>::pi = { FLT_PI, FLT_PI, FLT_PI, FLT_PI };
    uniform_constant<float4, float> const uniform<float4>::half_pi = { FLT_PI_2, FLT_PI_2, FLT_PI_2, FLT_PI_2 };
    uniform_constant<float4, float> const uniform<float4>::two_pi = { FLT_2PI, FLT_2PI, FLT_2PI, FLT_2PI };
    uniform_constant<float4, float> const uniform<float4>::negative_pi = { -FLT_PI, -FLT_PI, -FLT_PI, -FLT_PI };
    uniform_constant<float4, float> const uniform<float4>::negative_half_pi = { -FLT_PI_2, -FLT_PI_2, -FLT_PI_2, -FLT_PI_2 };
    uniform_constant<float4, float> const uniform<float4>::negative_two_pi = { -FLT_2PI, -FLT_2PI, -FLT_2PI, -FLT_2PI };
    uniform_constant<float4, float> const uniform<float4>::reciprocal_pi = { FLT_1_PI, FLT_1_PI, FLT_1_PI, FLT_1_PI };
    uniform_constant<float4, float> const uniform<float4>::reciprocal_half_pi = { FLT_2_PI, FLT_2_PI, FLT_2_PI, FLT_2_PI };
    uniform_constant<float4, float> const uniform<float4>::reciprocal_two_pi = { FLT_1_2PI, FLT_1_2PI, FLT_1_2PI, FLT_1_2PI };
    uniform_constant<float4, float> const uniform<float4>::sincos_range_constants = { FLT_PI_2, FLT_PI, FLT_2PI, FLT_1_2PI };
    uniform_constant<float4, float> const uniform<float4>::tan_range_constants = { FLT_PI_4, FLT_PI_2, FLT_PI, FLT_1_PI };
    uniform_constant<float4, float> const uniform<float4>::native_acos_coefficients = { 1.00000011921000e-0f, 1.685507744550705e-1f, 2.732352661783657e-2f, 2.5453434640888777e-2f };
    /*uniform_constant<float4, float> const uniform<float4>::native_atan_coefficients = ;*/
    uniform_constant<float4, float> const uniform<float4>::native_cos_coefficients = { 1.0000000000000000e-0f, -4.9986025691032410e-1f, 4.1419546120219520e-2f, -1.2521623258135060e-3f };
    uniform_constant<float4, float> const uniform<float4>::native_sin_coefficients = { 1.0000000000000000e-0f, -1.6665853559970856e-1f, 8.3142780907236350e-3f, -1.8542309658727652e-4f };
    uniform_constant<float4, float> const uniform<float4>::native_tan_coefficients0 = { 1.0000000000000000e-0f, 3.3315432071685790e-1f, 1.3606520916970538e-1f, 4.1398061482748924e-2f };
    uniform_constant<float4, float> const uniform<float4>::native_tan_coefficients1 = { 4.3089277326655290e-2f, -3.3333304524421690e-1f, -2.2170389989423330e-2f, -2.3377968818477537e-3f };
    uniform_constant<float4, float> const uniform<float4>::acos_coefficients0 = { 1.00000011921000e-0f, 1.6666904091835022e-1f, 3.7442680577647804e-2f, 1.1623952984665986e-2f };
    uniform_constant<float4, float> const uniform<float4>::acos_coefficients1 = { 2.05340039940554e-3f, 4.8035793077980530e-3f, -2.8889352595728160e-3f, 1.7377158015362438e-3f };
    /*uniform_constant<float4, float> const uniform<float4>::atan_coefficients0 = ;
    uniform_constant<float4, float> const uniform<float4>::atan_coefficients1 = ;*/
    uniform_constant<float4, float> const uniform<float4>::cos_coefficients0 = { 1.0000000000000000e-0f, -5.0000000000000000e-1f, 4.1666666666056330e-2f, -1.3888888860984269e-3f };
    uniform_constant<float4, float> const uniform<float4>::cos_coefficients1 = { 2.4801582421938170e-5f, -2.7556891974788950e-7f, 2.0856702467901100e-9f, -1.0986536764839979e-11f };
    uniform_constant<float4, float> const uniform<float4>::sin_coefficients0 = { 1.0000000000000000e-0f, -1.6666667163372040e-1f, 8.3333708144611930e-3f, -1.9850777498822076e-4f };
    uniform_constant<float4, float> const uniform<float4>::sin_coefficients1 = { 2.8673509297532770e-6f, -9.1621870444937360e-8f, 1.9761453001926614e-8f, -2.2636462059494963e-9f };
    uniform_constant<float4, float> const uniform<float4>::tan_coefficients0 = { 1.0000000000000000e-0f, 3.3315432071685790e-1f,  3.3333349e-1f, -3.3333331e-1f };
    uniform_constant<float4, float> const uniform<float4>::tan_coefficients1 = {  1.3332675e-1f, -2.2222834e-2f,  5.4058798e-2f, -2.1100920e-3f };
    uniform_constant<float4, float> const uniform<float4>::tan_coefficients2 = {  2.1286959e-2f, -2.4164711e-4f,  1.0825207e-2f,  5.0940082e-5f };
    uniform_constant<float4, float> const uniform<float4>::tan_coefficients3 = {  1.0137548e-4f, -8.8050190e-5f,  4.3710317e-3f,  3.9700077e-5f };
    uniform_constant<float4, float> const uniform<float4>::hermite_coefficients = { 0.0f, 1.0f, 2.0f, 3.0f }; 
    uniform_constant<float4, float> const uniform<float4>::zero = { 0.0f, 0.0f, 0.0f, 0.0f };
    uniform_constant<float4, float> const uniform<float4>::one = { 1.0f, 1.0f, 1.0f, 1.0f };
    uniform_constant<float4, float> const uniform<float4>::one_xy = { 1.0f, 1.0f, 0.0f, 0.0f };
    uniform_constant<float4, float> const uniform<float4>::one_xyz = { 1.0f, 1.0f, 1.0f, 0.0f };
    uniform_constant<float4, float> const uniform<float4>::half = { 0.5f, 0.5f, 0.5f, 0.5f };
    uniform_constant<float4, float> const uniform<float4>::half_xy = { 0.5f, 0.5f, 0.0f, 0.0f };
    uniform_constant<float4, float> const uniform<float4>::half_xyz = { 0.5f, 0.5f, 0.5f, 0.0f };
    uniform_constant<float4, uint32_t> const uniform<float4>::negative_zero = { 0x80000000u, 0x80000000u, 0x80000000u, 0x80000000u };
    uniform_constant<float4, uint32_t> const uniform<float4>::negative_zero_xy = { 0x80000000u, 0x80000000u, 0x00000000u, 0x00000000u };
    uniform_constant<float4, uint32_t> const uniform<float4>::negative_zero_xyz = { 0x80000000u, 0x80000000u, 0x80000000u, 0x00000000u };
    uniform_constant<float4, float> const uniform<float4>::negative_one = { -1.0f, -1.0f, -1.0f, -1.0f };
    uniform_constant<float4, float> const uniform<float4>::negative_one_xy = { -1.0f, -1.0f, 0.0f, 0.0f };
    uniform_constant<float4, float> const uniform<float4>::negative_one_xyz = { -1.0f, -1.0f, -1.0f, 0.0f };
    uniform_constant<float4, float> const uniform<float4>::negative_half = { -0.5f, -0.5f, -0.5f, -0.5f };
    uniform_constant<float4, float> const uniform<float4>::negative_half_xy = { -0.5f, -0.5f, 0.0f, 0.0f };
    uniform_constant<float4, float> const uniform<float4>::negative_half_xyz = { -0.5f, -0.5f, -0.5f, 0.0f };
    uniform_constant<float4, float> const uniform<float4>::identity_x = { 1.0f, 0.0f, 0.0f, 0.0f };
    uniform_constant<float4, float> const uniform<float4>::identity_y = { 0.0f, 1.0f, 0.0f, 0.0f };
    uniform_constant<float4, float> const uniform<float4>::identity_z = { 0.0f, 0.0f, 1.0f, 0.0f };
    uniform_constant<float4, float> const uniform<float4>::identity_w = { 0.0f, 0.0f, 0.0f, 1.0f };
    uniform_constant<float4, float> const uniform<float4>::negative_identity_x = { -1.0f, 0.0f, 0.0f, 0.0f };
    uniform_constant<float4, float> const uniform<float4>::negative_identity_y = { 0.0f, -1.0f, 0.0f, 0.0f };
    uniform_constant<float4, float> const uniform<float4>::negative_identity_z = { 0.0f, 0.0f, -1.0f, 0.0f };
    uniform_constant<float4, float> const uniform<float4>::negative_identity_w = { 0.0f, 0.0f, 0.0f, -1.0f };
    uniform_constant<float4, uint32_t> const uniform<float4>::absolute_mask = { 0x7FFFFFFFu, 0x7FFFFFFFu, 0x7FFFFFFFu, 0x7FFFFFFFu };
    uniform_constant<float4, uint32_t> const uniform<float4>::fraction_mask = { 0x4B000000u, 0x4B000000u, 0x4B000000u, 0x4B000000u };
    uniform_constant<float4, uint32_t> const uniform<float4>::mask_x = { 0xFFFFFFFFu, 0x00000000u, 0x00000000u, 0x00000000u };
    uniform_constant<float4, uint32_t> const uniform<float4>::mask_y = { 0x00000000u, 0xFFFFFFFFu, 0x00000000u, 0x00000000u };
    uniform_constant<float4, uint32_t> const uniform<float4>::mask_z = { 0x00000000u, 0x00000000u, 0xFFFFFFFFu, 0x00000000u };
    uniform_constant<float4, uint32_t> const uniform<float4>::mask_w = { 0x00000000u, 0x00000000u, 0x00000000u, 0xFFFFFFFFu };
    uniform_constant<float4, uint32_t> const uniform<float4>::mask_xy = { 0xFFFFFFFFu, 0xFFFFFFFFu, 0x00000000u, 0x00000000u };
    uniform_constant<float4, uint32_t> const uniform<float4>::mask_xyz = { 0xFFFFFFFFu, 0xFFFFFFFFu, 0xFFFFFFFFu, 0x00000000u };
    uniform_constant<float4, uint32_t> const uniform<float4>::mask_xyzw = { 0xFFFFFFFFu, 0xFFFFFFFFu, 0xFFFFFFFFu, 0xFFFFFFFFu };
}}
