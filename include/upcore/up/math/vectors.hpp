//
//  Upcaste Performance Libraries
//  Copyright (C) 2012-2013 Jesse W. Towner
//
//  Permission is hereby granted, free of charge, to any person obtaining
//  a copy of this software and associated documentation files (the
//  "Software"), to deal in the Software without restriction, including
//  without limitation the rights to use, copy, modify, merge, publish,
//  distribute, sublicense, and/or sell copies of the Software, and to
//  permit persons to whom the Software is furnished to do so, subject to
//  the following conditions:
//
//  The above copyright notice and this permission notice shall be
//  included in all copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
//  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
//  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
//  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
//  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
//  TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
//  SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//

//
//  Do not edit! This file is automatically generated.
//

#ifndef UP_MATH_VECTORS_HPP
#define UP_MATH_VECTORS_HPP

#include <up/math/mathfwd.hpp>

#if !defined(UP_NO_SIMD) && defined(UP_SIMD_NEON)
#   include <up/math/neon/vectors.inl>
#elif !defined(UP_NO_SIMD) && defined(UP_SIMD_SSE_2)
#   include <up/math/sse/vectors.inl>
#else
#   include <up/math/generic/vectors.inl>
#endif

namespace up { namespace math
{
    //
    // Type Traits
    //

    template <> struct LIBUPCOREAPI as_floating_point<int2> { typedef float2 type; };
    template <> struct LIBUPCOREAPI as_floating_point<int3> { typedef float3 type; };
    template <> struct LIBUPCOREAPI as_floating_point<int4> { typedef float4 type; };
    template <> struct LIBUPCOREAPI as_floating_point<uint2> { typedef float2 type; };
    template <> struct LIBUPCOREAPI as_floating_point<uint3> { typedef float3 type; };
    template <> struct LIBUPCOREAPI as_floating_point<uint4> { typedef float4 type; };
    template <> struct LIBUPCOREAPI as_floating_point<float2> { typedef float2 type; };
    template <> struct LIBUPCOREAPI as_floating_point<float3> { typedef float3 type; };
    template <> struct LIBUPCOREAPI as_floating_point<float4> { typedef float4 type; };
    template <> struct LIBUPCOREAPI as_floating_point<long2> { typedef double2 type; };
    template <> struct LIBUPCOREAPI as_floating_point<long3> { typedef double3 type; };
    template <> struct LIBUPCOREAPI as_floating_point<long4> { typedef double4 type; };
    template <> struct LIBUPCOREAPI as_floating_point<ulong2> { typedef double2 type; };
    template <> struct LIBUPCOREAPI as_floating_point<ulong3> { typedef double3 type; };
    template <> struct LIBUPCOREAPI as_floating_point<ulong4> { typedef double4 type; };
    template <> struct LIBUPCOREAPI as_floating_point<double2> { typedef double2 type; };
    template <> struct LIBUPCOREAPI as_floating_point<double3> { typedef double3 type; };
    template <> struct LIBUPCOREAPI as_floating_point<double4> { typedef double4 type; };
    template <> struct LIBUPCOREAPI as_signed<int2> { typedef int2 type; };
    template <> struct LIBUPCOREAPI as_signed<int3> { typedef int3 type; };
    template <> struct LIBUPCOREAPI as_signed<int4> { typedef int4 type; };
    template <> struct LIBUPCOREAPI as_signed<uint2> { typedef int2 type; };
    template <> struct LIBUPCOREAPI as_signed<uint3> { typedef int3 type; };
    template <> struct LIBUPCOREAPI as_signed<uint4> { typedef int4 type; };
    template <> struct LIBUPCOREAPI as_signed<float2> { typedef int2 type; };
    template <> struct LIBUPCOREAPI as_signed<float3> { typedef int3 type; };
    template <> struct LIBUPCOREAPI as_signed<float4> { typedef int4 type; };
    template <> struct LIBUPCOREAPI as_signed<long2> { typedef long2 type; };
    template <> struct LIBUPCOREAPI as_signed<long3> { typedef long3 type; };
    template <> struct LIBUPCOREAPI as_signed<long4> { typedef long4 type; };
    template <> struct LIBUPCOREAPI as_signed<ulong2> { typedef long2 type; };
    template <> struct LIBUPCOREAPI as_signed<ulong3> { typedef long3 type; };
    template <> struct LIBUPCOREAPI as_signed<ulong4> { typedef long4 type; };
    template <> struct LIBUPCOREAPI as_signed<double2> { typedef long2 type; };
    template <> struct LIBUPCOREAPI as_signed<double3> { typedef long3 type; };
    template <> struct LIBUPCOREAPI as_signed<double4> { typedef long4 type; };
    template <> struct LIBUPCOREAPI as_unsigned<int2> { typedef uint2 type; };
    template <> struct LIBUPCOREAPI as_unsigned<int3> { typedef uint3 type; };
    template <> struct LIBUPCOREAPI as_unsigned<int4> { typedef uint4 type; };
    template <> struct LIBUPCOREAPI as_unsigned<uint2> { typedef uint2 type; };
    template <> struct LIBUPCOREAPI as_unsigned<uint3> { typedef uint3 type; };
    template <> struct LIBUPCOREAPI as_unsigned<uint4> { typedef uint4 type; };
    template <> struct LIBUPCOREAPI as_unsigned<float2> { typedef uint2 type; };
    template <> struct LIBUPCOREAPI as_unsigned<float3> { typedef uint3 type; };
    template <> struct LIBUPCOREAPI as_unsigned<float4> { typedef uint4 type; };
    template <> struct LIBUPCOREAPI as_unsigned<long2> { typedef ulong2 type; };
    template <> struct LIBUPCOREAPI as_unsigned<long3> { typedef ulong3 type; };
    template <> struct LIBUPCOREAPI as_unsigned<long4> { typedef ulong4 type; };
    template <> struct LIBUPCOREAPI as_unsigned<ulong2> { typedef ulong2 type; };
    template <> struct LIBUPCOREAPI as_unsigned<ulong3> { typedef ulong3 type; };
    template <> struct LIBUPCOREAPI as_unsigned<ulong4> { typedef ulong4 type; };
    template <> struct LIBUPCOREAPI as_unsigned<double2> { typedef ulong2 type; };
    template <> struct LIBUPCOREAPI as_unsigned<double3> { typedef ulong3 type; };
    template <> struct LIBUPCOREAPI as_unsigned<double4> { typedef ulong4 type; };
    template <> struct LIBUPCOREAPI make_scalar<int2> { typedef int32_t type; };
    template <> struct LIBUPCOREAPI make_scalar<int3> { typedef int32_t type; };
    template <> struct LIBUPCOREAPI make_scalar<int4> { typedef int32_t type; };
    template <> struct LIBUPCOREAPI make_scalar<uint2> { typedef uint32_t type; };
    template <> struct LIBUPCOREAPI make_scalar<uint3> { typedef uint32_t type; };
    template <> struct LIBUPCOREAPI make_scalar<uint4> { typedef uint32_t type; };
    template <> struct LIBUPCOREAPI make_scalar<float2> { typedef float type; };
    template <> struct LIBUPCOREAPI make_scalar<float3> { typedef float type; };
    template <> struct LIBUPCOREAPI make_scalar<float4> { typedef float type; };
    template <> struct LIBUPCOREAPI make_scalar<long2> { typedef int64_t type; };
    template <> struct LIBUPCOREAPI make_scalar<long3> { typedef int64_t type; };
    template <> struct LIBUPCOREAPI make_scalar<long4> { typedef int64_t type; };
    template <> struct LIBUPCOREAPI make_scalar<ulong2> { typedef uint64_t type; };
    template <> struct LIBUPCOREAPI make_scalar<ulong3> { typedef uint64_t type; };
    template <> struct LIBUPCOREAPI make_scalar<ulong4> { typedef uint64_t type; };
    template <> struct LIBUPCOREAPI make_scalar<double2> { typedef double type; };
    template <> struct LIBUPCOREAPI make_scalar<double3> { typedef double type; };
    template <> struct LIBUPCOREAPI make_scalar<double4> { typedef double type; };
    template <> struct LIBUPCOREAPI make_vector<int32_t,2> { typedef int2 type; };
    template <> struct LIBUPCOREAPI make_vector<int32_t,3> { typedef int3 type; };
    template <> struct LIBUPCOREAPI make_vector<int32_t,4> { typedef int4 type; };
    template <> struct LIBUPCOREAPI make_vector<uint32_t,2> { typedef uint2 type; };
    template <> struct LIBUPCOREAPI make_vector<uint32_t,3> { typedef uint3 type; };
    template <> struct LIBUPCOREAPI make_vector<uint32_t,4> { typedef uint4 type; };
    template <> struct LIBUPCOREAPI make_vector<float,2> { typedef float2 type; };
    template <> struct LIBUPCOREAPI make_vector<float,3> { typedef float3 type; };
    template <> struct LIBUPCOREAPI make_vector<float,4> { typedef float4 type; };
    template <> struct LIBUPCOREAPI make_vector<int64_t,2> { typedef long2 type; };
    template <> struct LIBUPCOREAPI make_vector<int64_t,3> { typedef long3 type; };
    template <> struct LIBUPCOREAPI make_vector<int64_t,4> { typedef long4 type; };
    template <> struct LIBUPCOREAPI make_vector<uint64_t,2> { typedef ulong2 type; };
    template <> struct LIBUPCOREAPI make_vector<uint64_t,3> { typedef ulong3 type; };
    template <> struct LIBUPCOREAPI make_vector<uint64_t,4> { typedef ulong4 type; };
    template <> struct LIBUPCOREAPI make_vector<double,2> { typedef double2 type; };
    template <> struct LIBUPCOREAPI make_vector<double,3> { typedef double3 type; };
    template <> struct LIBUPCOREAPI make_vector<double,4> { typedef double4 type; };
    template <> struct LIBUPCOREAPI vector_step<int2> : integral_constant<size_t, 2> { };
    template <> struct LIBUPCOREAPI vector_step<int3> : integral_constant<size_t, 3> { };
    template <> struct LIBUPCOREAPI vector_step<int4> : integral_constant<size_t, 4> { };
    template <> struct LIBUPCOREAPI vector_step<uint2> : integral_constant<size_t, 2> { };
    template <> struct LIBUPCOREAPI vector_step<uint3> : integral_constant<size_t, 3> { };
    template <> struct LIBUPCOREAPI vector_step<uint4> : integral_constant<size_t, 4> { };
    template <> struct LIBUPCOREAPI vector_step<float2> : integral_constant<size_t, 2> { };
    template <> struct LIBUPCOREAPI vector_step<float3> : integral_constant<size_t, 3> { };
    template <> struct LIBUPCOREAPI vector_step<float4> : integral_constant<size_t, 4> { };
    template <> struct LIBUPCOREAPI vector_step<long2> : integral_constant<size_t, 2> { };
    template <> struct LIBUPCOREAPI vector_step<long3> : integral_constant<size_t, 3> { };
    template <> struct LIBUPCOREAPI vector_step<long4> : integral_constant<size_t, 4> { };
    template <> struct LIBUPCOREAPI vector_step<ulong2> : integral_constant<size_t, 2> { };
    template <> struct LIBUPCOREAPI vector_step<ulong3> : integral_constant<size_t, 3> { };
    template <> struct LIBUPCOREAPI vector_step<ulong4> : integral_constant<size_t, 4> { };
    template <> struct LIBUPCOREAPI vector_step<double2> : integral_constant<size_t, 2> { };
    template <> struct LIBUPCOREAPI vector_step<double3> : integral_constant<size_t, 3> { };
    template <> struct LIBUPCOREAPI vector_step<double4> : integral_constant<size_t, 4> { };
    template <> struct LIBUPCOREAPI matrix_column_step<int2> : integral_constant<size_t, 2> { };
    template <> struct LIBUPCOREAPI matrix_column_step<int3> : integral_constant<size_t, 3> { };
    template <> struct LIBUPCOREAPI matrix_column_step<int4> : integral_constant<size_t, 4> { };
    template <> struct LIBUPCOREAPI matrix_column_step<uint2> : integral_constant<size_t, 2> { };
    template <> struct LIBUPCOREAPI matrix_column_step<uint3> : integral_constant<size_t, 3> { };
    template <> struct LIBUPCOREAPI matrix_column_step<uint4> : integral_constant<size_t, 4> { };
    template <> struct LIBUPCOREAPI matrix_column_step<float2> : integral_constant<size_t, 2> { };
    template <> struct LIBUPCOREAPI matrix_column_step<float3> : integral_constant<size_t, 3> { };
    template <> struct LIBUPCOREAPI matrix_column_step<float4> : integral_constant<size_t, 4> { };
    template <> struct LIBUPCOREAPI matrix_column_step<long2> : integral_constant<size_t, 2> { };
    template <> struct LIBUPCOREAPI matrix_column_step<long3> : integral_constant<size_t, 3> { };
    template <> struct LIBUPCOREAPI matrix_column_step<long4> : integral_constant<size_t, 4> { };
    template <> struct LIBUPCOREAPI matrix_column_step<ulong2> : integral_constant<size_t, 2> { };
    template <> struct LIBUPCOREAPI matrix_column_step<ulong3> : integral_constant<size_t, 3> { };
    template <> struct LIBUPCOREAPI matrix_column_step<ulong4> : integral_constant<size_t, 4> { };
    template <> struct LIBUPCOREAPI matrix_column_step<double2> : integral_constant<size_t, 2> { };
    template <> struct LIBUPCOREAPI matrix_column_step<double3> : integral_constant<size_t, 3> { };
    template <> struct LIBUPCOREAPI matrix_column_step<double4> : integral_constant<size_t, 4> { };
    template <> struct LIBUPCOREAPI is_vector<int2> : true_type { };
    template <> struct LIBUPCOREAPI is_vector<int3> : true_type { };
    template <> struct LIBUPCOREAPI is_vector<int4> : true_type { };
    template <> struct LIBUPCOREAPI is_vector<uint2> : true_type { };
    template <> struct LIBUPCOREAPI is_vector<uint3> : true_type { };
    template <> struct LIBUPCOREAPI is_vector<uint4> : true_type { };
    template <> struct LIBUPCOREAPI is_vector<float2> : true_type { };
    template <> struct LIBUPCOREAPI is_vector<float3> : true_type { };
    template <> struct LIBUPCOREAPI is_vector<float4> : true_type { };
    template <> struct LIBUPCOREAPI is_vector<long2> : true_type { };
    template <> struct LIBUPCOREAPI is_vector<long3> : true_type { };
    template <> struct LIBUPCOREAPI is_vector<long4> : true_type { };
    template <> struct LIBUPCOREAPI is_vector<ulong2> : true_type { };
    template <> struct LIBUPCOREAPI is_vector<ulong3> : true_type { };
    template <> struct LIBUPCOREAPI is_vector<ulong4> : true_type { };
    template <> struct LIBUPCOREAPI is_vector<double2> : true_type { };
    template <> struct LIBUPCOREAPI is_vector<double3> : true_type { };
    template <> struct LIBUPCOREAPI is_vector<double4> : true_type { };

    //
    // Uniforms
    //

    template <>
    struct LIBUPCOREAPI uniform<int4>
    {
        static uniform_constant<int4, int32_t> const min;
        static uniform_constant<int4, int32_t> const max;
        static uniform_constant<int4, int32_t> const zero;
        static uniform_constant<int4, int32_t> const one;
        static uniform_constant<int4, int32_t> const one_xy;
        static uniform_constant<int4, int32_t> const one_xyz;
        static uniform_constant<int4, int32_t> const negative_one;
        static uniform_constant<int4, int32_t> const negative_one_xy;
        static uniform_constant<int4, int32_t> const negative_one_xyz;
        static uniform_constant<int4, int32_t> const identity_x;
        static uniform_constant<int4, int32_t> const identity_y;
        static uniform_constant<int4, int32_t> const identity_z;
        static uniform_constant<int4, int32_t> const identity_w;
        static uniform_constant<int4, int32_t> const negative_identity_x;
        static uniform_constant<int4, int32_t> const negative_identity_y;
        static uniform_constant<int4, int32_t> const negative_identity_z;
        static uniform_constant<int4, int32_t> const negative_identity_w;
        static uniform_constant<int4, uint32_t> const mask_x;
        static uniform_constant<int4, uint32_t> const mask_y;
        static uniform_constant<int4, uint32_t> const mask_z;
        static uniform_constant<int4, uint32_t> const mask_w;
        static uniform_constant<int4, uint32_t> const mask_xy;
        static uniform_constant<int4, uint32_t> const mask_xyz;
        static uniform_constant<int4, uint32_t> const mask_xyzw;
        static uniform_constant<int4, int32_t> const rotate_max;
    };

    template <>
    struct LIBUPCOREAPI uniform<uint4>
    {
        static uniform_constant<uint4, uint32_t> const max;
        static uniform_constant<uint4, uint32_t> const zero;
        static uniform_constant<uint4, uint32_t> const one;
        static uniform_constant<uint4, uint32_t> const one_xy;
        static uniform_constant<uint4, uint32_t> const one_xyz;
        static uniform_constant<uint4, uint32_t> const identity_x;
        static uniform_constant<uint4, uint32_t> const identity_y;
        static uniform_constant<uint4, uint32_t> const identity_z;
        static uniform_constant<uint4, uint32_t> const identity_w;
        static uniform_constant<uint4, uint32_t> const mask_x;
        static uniform_constant<uint4, uint32_t> const mask_y;
        static uniform_constant<uint4, uint32_t> const mask_z;
        static uniform_constant<uint4, uint32_t> const mask_w;
        static uniform_constant<uint4, uint32_t> const mask_xy;
        static uniform_constant<uint4, uint32_t> const mask_xyz;
        static uniform_constant<uint4, uint32_t> const mask_xyzw;
        static uniform_constant<uint4, uint32_t> const rotate_max;
    };

    template <>
    struct LIBUPCOREAPI uniform<float4>
    {
        static uniform_constant<float4, float> const min;
        static uniform_constant<float4, float> const max;
        static uniform_constant<float4, float> const epsilon;
        static uniform_constant<float4, uint32_t> const one_plus_epsilon;
        static uniform_constant<float4, uint32_t> const half_plus_epsilon;
        static uniform_constant<float4, uint32_t> const one_minus_epsilon;
        static uniform_constant<float4, uint32_t> const half_minus_epsilon;
        static uniform_constant<float4, uint32_t> const infinity;
        static uniform_constant<float4, uint32_t> const quiet_nan;
        static uniform_constant<float4, float> const signed_min;
        static uniform_constant<float4, float> const signed_max;
        static uniform_constant<float4, float> const unsigned_max;
        static uniform_constant<float4, float> const degrees;
        static uniform_constant<float4, float> const radians;
        static uniform_constant<float4, float> const pi;
        static uniform_constant<float4, float> const half_pi;
        static uniform_constant<float4, float> const two_pi;
        static uniform_constant<float4, float> const negative_pi;
        static uniform_constant<float4, float> const negative_half_pi;
        static uniform_constant<float4, float> const negative_two_pi;
        static uniform_constant<float4, float> const reciprocal_pi;
        static uniform_constant<float4, float> const reciprocal_half_pi;
        static uniform_constant<float4, float> const reciprocal_two_pi;
        static uniform_constant<float4, float> const sincos_range_constants;
        static uniform_constant<float4, float> const tan_range_constants;
        static uniform_constant<float4, float> const native_acos_coefficients;
        static uniform_constant<float4, float> const native_atan_coefficients;
        static uniform_constant<float4, float> const native_cos_coefficients;
        static uniform_constant<float4, float> const native_sin_coefficients;
        static uniform_constant<float4, float> const native_tan_coefficients0;
        static uniform_constant<float4, float> const native_tan_coefficients1;
        static uniform_constant<float4, float> const acos_coefficients0;
        static uniform_constant<float4, float> const acos_coefficients1;
        static uniform_constant<float4, float> const atan_coefficients0;
        static uniform_constant<float4, float> const atan_coefficients1;
        static uniform_constant<float4, float> const cos_coefficients0;
        static uniform_constant<float4, float> const cos_coefficients1;
        static uniform_constant<float4, float> const sin_coefficients0;
        static uniform_constant<float4, float> const sin_coefficients1;
        static uniform_constant<float4, float> const tan_coefficients0;
        static uniform_constant<float4, float> const tan_coefficients1;
        static uniform_constant<float4, float> const tan_coefficients2;
        static uniform_constant<float4, float> const tan_coefficients3;
        static uniform_constant<float4, float> const hermite_coefficients;
        static uniform_constant<float4, float> const zero;
        static uniform_constant<float4, float> const one;
        static uniform_constant<float4, float> const one_xy;
        static uniform_constant<float4, float> const one_xyz;
        static uniform_constant<float4, float> const negative_one;
        static uniform_constant<float4, float> const negative_one_xy;
        static uniform_constant<float4, float> const negative_one_xyz;
        static uniform_constant<float4, float> const half;
        static uniform_constant<float4, float> const half_xy;
        static uniform_constant<float4, float> const half_xyz;
        static uniform_constant<float4, float> const negative_half;
        static uniform_constant<float4, float> const negative_half_xy;
        static uniform_constant<float4, float> const negative_half_xyz;
        static uniform_constant<float4, uint32_t> const negative_zero;
        static uniform_constant<float4, uint32_t> const negative_zero_xy;
        static uniform_constant<float4, uint32_t> const negative_zero_xyz;
        static uniform_constant<float4, float> const identity_x;
        static uniform_constant<float4, float> const identity_y;
        static uniform_constant<float4, float> const identity_z;
        static uniform_constant<float4, float> const identity_w;
        static uniform_constant<float4, float> const negative_identity_x;
        static uniform_constant<float4, float> const negative_identity_y;
        static uniform_constant<float4, float> const negative_identity_z;
        static uniform_constant<float4, float> const negative_identity_w;
        static uniform_constant<float4, uint32_t> const absolute_mask;
        static uniform_constant<float4, uint32_t> const fraction_mask;
        static uniform_constant<float4, uint32_t> const mask_x;
        static uniform_constant<float4, uint32_t> const mask_y;
        static uniform_constant<float4, uint32_t> const mask_z;
        static uniform_constant<float4, uint32_t> const mask_w;
        static uniform_constant<float4, uint32_t> const mask_xy;
        static uniform_constant<float4, uint32_t> const mask_xyz;
        static uniform_constant<float4, uint32_t> const mask_xyzw;
    };

    template <>
    struct LIBUPCOREAPI uniform<long4>
    {
        static uniform_constant<long4, int64_t> const min;
        static uniform_constant<long4, int64_t> const max;
        static uniform_constant<long4, int64_t> const zero;
        static uniform_constant<long4, int64_t> const one;
        static uniform_constant<long4, int64_t> const one_xy;
        static uniform_constant<long4, int64_t> const one_xyz;
        static uniform_constant<long4, int64_t> const negative_one;
        static uniform_constant<long4, int64_t> const negative_one_xy;
        static uniform_constant<long4, int64_t> const negative_one_xyz;
        static uniform_constant<long4, int64_t> const identity_x;
        static uniform_constant<long4, int64_t> const identity_y;
        static uniform_constant<long4, int64_t> const identity_z;
        static uniform_constant<long4, int64_t> const identity_w;
        static uniform_constant<long4, int64_t> const negative_identity_x;
        static uniform_constant<long4, int64_t> const negative_identity_y;
        static uniform_constant<long4, int64_t> const negative_identity_z;
        static uniform_constant<long4, int64_t> const negative_identity_w;
        static uniform_constant<long4, uint64_t> const mask_x;
        static uniform_constant<long4, uint64_t> const mask_y;
        static uniform_constant<long4, uint64_t> const mask_z;
        static uniform_constant<long4, uint64_t> const mask_w;
        static uniform_constant<long4, uint64_t> const mask_xy;
        static uniform_constant<long4, uint64_t> const mask_xyz;
        static uniform_constant<long4, uint64_t> const mask_xyzw;
        static uniform_constant<long4, int64_t> const rotate_max;
    };

    template <>
    struct LIBUPCOREAPI uniform<ulong4>
    {
        static uniform_constant<ulong4, uint64_t> const max;
        static uniform_constant<ulong4, uint64_t> const zero;
        static uniform_constant<ulong4, uint64_t> const one;
        static uniform_constant<ulong4, uint64_t> const one_xy;
        static uniform_constant<ulong4, uint64_t> const one_xyz;
        static uniform_constant<ulong4, uint64_t> const identity_x;
        static uniform_constant<ulong4, uint64_t> const identity_y;
        static uniform_constant<ulong4, uint64_t> const identity_z;
        static uniform_constant<ulong4, uint64_t> const identity_w;
        static uniform_constant<ulong4, uint64_t> const mask_x;
        static uniform_constant<ulong4, uint64_t> const mask_y;
        static uniform_constant<ulong4, uint64_t> const mask_z;
        static uniform_constant<ulong4, uint64_t> const mask_w;
        static uniform_constant<ulong4, uint64_t> const mask_xy;
        static uniform_constant<ulong4, uint64_t> const mask_xyz;
        static uniform_constant<ulong4, uint64_t> const mask_xyzw;
        static uniform_constant<ulong4, uint64_t> const rotate_max;
    };

    template <>
    struct LIBUPCOREAPI uniform<double4>
    {
        static uniform_constant<double4, double> const min;
        static uniform_constant<double4, double> const max;
        static uniform_constant<double4, double> const epsilon;
        static uniform_constant<double4, uint64_t> const one_plus_epsilon;
        static uniform_constant<double4, uint64_t> const half_plus_epsilon;
        static uniform_constant<double4, uint64_t> const one_minus_epsilon;
        static uniform_constant<double4, uint64_t> const half_minus_epsilon;
        static uniform_constant<double4, uint64_t> const infinity;
        static uniform_constant<double4, uint64_t> const quiet_nan;
        static uniform_constant<double4, double> const signed_min;
        static uniform_constant<double4, double> const signed_max;
        static uniform_constant<double4, double> const unsigned_max;
        static uniform_constant<double4, double> const degrees;
        static uniform_constant<double4, double> const radians;
        static uniform_constant<double4, double> const pi;
        static uniform_constant<double4, double> const half_pi;
        static uniform_constant<double4, double> const two_pi;
        static uniform_constant<double4, double> const negative_pi;
        static uniform_constant<double4, double> const negative_half_pi;
        static uniform_constant<double4, double> const negative_two_pi;
        static uniform_constant<double4, double> const reciprocal_pi;
        static uniform_constant<double4, double> const reciprocal_half_pi;
        static uniform_constant<double4, double> const reciprocal_two_pi;
        static uniform_constant<double4, double> const sincos_range_constants;
        static uniform_constant<double4, double> const tan_range_constants;
        static uniform_constant<double4, double> const acos_coefficients0;
        static uniform_constant<double4, double> const acos_coefficients1;
        static uniform_constant<double4, double> const acos_coefficients2;
        static uniform_constant<double4, double> const acos_coefficients3;
        static uniform_constant<double4, double> const acos_coefficients4;
        static uniform_constant<double4, double> const atan_coefficients0;
        static uniform_constant<double4, double> const atan_coefficients1;
        static uniform_constant<double4, double> const atan_coefficients2;
        static uniform_constant<double4, double> const cos_coefficients0;
        static uniform_constant<double4, double> const cos_coefficients1;
        static uniform_constant<double4, double> const cos_coefficients2;
        static uniform_constant<double4, double> const sin_coefficients0;
        static uniform_constant<double4, double> const sin_coefficients1;
        static uniform_constant<double4, double> const sin_coefficients2;
        static uniform_constant<double4, double> const tan_coefficients0;
        static uniform_constant<double4, double> const tan_coefficients1;
        static uniform_constant<double4, double> const tan_coefficients2;
        static uniform_constant<double4, double> const tan_coefficients3;
        static uniform_constant<double4, double> const tan_coefficients4;
        static uniform_constant<double4, double> const tan_coefficients5;
        static uniform_constant<double4, double> const hermite_coefficients;
        static uniform_constant<double4, double> const zero;
        static uniform_constant<double4, double> const one;
        static uniform_constant<double4, double> const one_xy;
        static uniform_constant<double4, double> const one_xyz;
        static uniform_constant<double4, double> const negative_one;
        static uniform_constant<double4, double> const negative_one_xy;
        static uniform_constant<double4, double> const negative_one_xyz;
        static uniform_constant<double4, double> const half;
        static uniform_constant<double4, double> const half_xy;
        static uniform_constant<double4, double> const half_xyz;
        static uniform_constant<double4, double> const negative_half;
        static uniform_constant<double4, double> const negative_half_xy;
        static uniform_constant<double4, double> const negative_half_xyz;
        static uniform_constant<double4, uint64_t> const negative_zero;
        static uniform_constant<double4, uint64_t> const negative_zero_xy;
        static uniform_constant<double4, uint64_t> const negative_zero_xyz;
        static uniform_constant<double4, double> const identity_x;
        static uniform_constant<double4, double> const identity_y;
        static uniform_constant<double4, double> const identity_z;
        static uniform_constant<double4, double> const identity_w;
        static uniform_constant<double4, double> const negative_identity_x;
        static uniform_constant<double4, double> const negative_identity_y;
        static uniform_constant<double4, double> const negative_identity_z;
        static uniform_constant<double4, double> const negative_identity_w;
        static uniform_constant<double4, uint64_t> const absolute_mask;
        static uniform_constant<double4, uint64_t> const fraction_mask;
        static uniform_constant<double4, uint64_t> const mask_x;
        static uniform_constant<double4, uint64_t> const mask_y;
        static uniform_constant<double4, uint64_t> const mask_z;
        static uniform_constant<double4, uint64_t> const mask_w;
        static uniform_constant<double4, uint64_t> const mask_xy;
        static uniform_constant<double4, uint64_t> const mask_xyz;
        static uniform_constant<double4, uint64_t> const mask_xyzw;
    };

    //
    // Initialization Functions
    //
    
    template <class Vector>
    inline UPALWAYSINLINE UPPURE
    Vector broadcast(typename up::math::detail::constructors<Vector>::element_type x) noexcept {
        return ::up::math::detail::constructors<Vector>::broadcast(x);
    }

    template <class Vector>
    inline UPALWAYSINLINE UPPURE
    Vector broadcast2(typename up::math::detail::constructors<Vector>::vector2_type p) noexcept {
        return ::up::math::detail::constructors<Vector>::broadcast2(p);
    }

    template <class Vector>
    inline UPALWAYSINLINE UPPURE
    Vector broadcast4(typename up::math::detail::constructors<Vector>::vector4_type p) noexcept {
        return ::up::math::detail::constructors<Vector>::broadcast4(p);
    }

    template <class Vector>
    inline UPALWAYSINLINE UPPURE
    Vector broadcast8(typename up::math::detail::constructors<Vector>::vector8_type p) noexcept {
        return ::up::math::detail::constructors<Vector>::broadcast8(p);
    }

    template <class Vector>
    inline UPALWAYSINLINE UPPURE
    Vector make(
        typename up::math::detail::constructors<Vector>::element_type x
    )
    noexcept {
        return ::up::math::detail::constructors<Vector>::make(x);
    }

    template <class Vector>
    inline UPALWAYSINLINE UPPURE
    Vector make(
        typename up::math::detail::constructors<Vector>::element_type x,
        typename up::math::detail::constructors<Vector>::element_type y
    )
    noexcept {
        return ::up::math::detail::constructors<Vector>::make(x, y);
    }

    template <class Vector>
    inline UPALWAYSINLINE UPPURE
    Vector make(
        typename up::math::detail::constructors<Vector>::element_type x,
        typename up::math::detail::constructors<Vector>::element_type y,
        typename up::math::detail::constructors<Vector>::element_type z
    )
    noexcept {
        return ::up::math::detail::constructors<Vector>::make(x, y, z);
    }

    template <class Vector>
    inline UPALWAYSINLINE UPPURE
    Vector make(
        typename up::math::detail::constructors<Vector>::element_type x,
        typename up::math::detail::constructors<Vector>::element_type y,
        typename up::math::detail::constructors<Vector>::element_type z,
        typename up::math::detail::constructors<Vector>::element_type w
    )
    noexcept {
        return ::up::math::detail::constructors<Vector>::make(x, y, z, w);
    }

    template <class Vector>
    inline UPALWAYSINLINE UPPURE
    Vector zero() noexcept {
        return ::up::math::detail::constructors<Vector>::zero();
    }

    //
    // Load Functions
    //

    template <class Vector>
    inline UPALWAYSINLINE
    Vector loadbroadcast(typename up::math::detail::constructors<Vector>::element_pointer p) noexcept {
        return ::up::math::detail::constructors<Vector>::loadbroadcast(p);
    }

    template <class Vector>
    inline UPALWAYSINLINE
    Vector loadbroadcast(size_t offset, typename up::math::detail::constructors<Vector>::element_pointer p) noexcept {
        return ::up::math::detail::constructors<Vector>::loadbroadcast(offset, p);
    }

    template <class Vector>
    inline UPALWAYSINLINE
    Vector loadbroadcast2(typename up::math::detail::constructors<Vector>::vector2_pointer p) noexcept {
        return ::up::math::detail::constructors<Vector>::loadbroadcast2(p);
    }

    template <class Vector>
    inline UPALWAYSINLINE
    Vector loadbroadcast2(size_t offset, typename up::math::detail::constructors<Vector>::vector2_pointer p) noexcept {
        return ::up::math::detail::constructors<Vector>::loadbroadcast2(offset, p);
    }
    template <class Vector>
    inline UPALWAYSINLINE
    Vector loadbroadcast4(typename up::math::detail::constructors<Vector>::vector4_pointer p) noexcept {
        return ::up::math::detail::constructors<Vector>::loadbroadcast4(p);
    }

    template <class Vector>
    inline UPALWAYSINLINE
    Vector loadbroadcast4(size_t offset, typename up::math::detail::constructors<Vector>::vector4_pointer p) noexcept {
        return ::up::math::detail::constructors<Vector>::loadbroadcast4(offset, p);
    }
    template <class Vector>
    inline UPALWAYSINLINE
    Vector loadbroadcast8(typename up::math::detail::constructors<Vector>::vector8_pointer p) noexcept {
        return ::up::math::detail::constructors<Vector>::loadbroadcast8(p);
    }

    template <class Vector>
    inline UPALWAYSINLINE
    Vector loadbroadcast8(size_t offset, typename up::math::detail::constructors<Vector>::vector8_pointer p) noexcept {
        return ::up::math::detail::constructors<Vector>::loadbroadcast8(offset, p);
    }
    template <class Vector>
    inline UPALWAYSINLINE
    Vector loadscalar(typename up::math::detail::constructors<Vector>::element_pointer p) noexcept {
        return ::up::math::detail::constructors<Vector>::vloadscalar(p);
    }

    template <class Vector>
    inline UPALWAYSINLINE
    Vector loadscalar(size_t offset, typename up::math::detail::constructors<Vector>::element_pointer p) noexcept {
        return ::up::math::detail::constructors<Vector>::vloadscalar(offset, p);
    }

    template <class Vector>
    inline UPALWAYSINLINE
    Vector load2(typename up::math::detail::constructors<Vector>::vector2_pointer p) noexcept {
        return ::up::math::detail::constructors<Vector>::load2(p);
    }

    template <class Vector>
    inline UPALWAYSINLINE
    Vector load2(size_t offset, typename up::math::detail::constructors<Vector>::vector2_pointer p) noexcept {
        return ::up::math::detail::constructors<Vector>::load2(offset, p);
    }

    template <class Vector>
    inline UPALWAYSINLINE
    Vector load3(typename up::math::detail::constructors<Vector>::vector3_pointer p) noexcept {
        return ::up::math::detail::constructors<Vector>::load3(p);
    }

    template <class Vector>
    inline UPALWAYSINLINE
    Vector load3(size_t offset, typename up::math::detail::constructors<Vector>::vector3_pointer p) noexcept {
        return ::up::math::detail::constructors<Vector>::load3(offset, p);
    }

    template <class Vector>
    inline UPALWAYSINLINE
    Vector load4(typename up::math::detail::constructors<Vector>::vector4_pointer p) noexcept {
        return ::up::math::detail::constructors<Vector>::load4(p);
    }

    template <class Vector>
    inline UPALWAYSINLINE
    Vector load4(size_t offset, typename up::math::detail::constructors<Vector>::vector4_pointer p) noexcept {
        return ::up::math::detail::constructors<Vector>::load4(offset, p);
    }

    template <class Vector>
    inline UPALWAYSINLINE
    Vector load8(typename up::math::detail::constructors<Vector>::vector8_pointer p) noexcept {
        return ::up::math::detail::constructors<Vector>::load8(p);
    }

    template <class Vector>
    inline UPALWAYSINLINE
    Vector load8(size_t offset, typename up::math::detail::constructors<Vector>::vector8_pointer p) noexcept {
        return ::up::math::detail::constructors<Vector>::load8(offset, p);
    }

    template <class Vector>
    inline UPALWAYSINLINE
    Vector load16(typename up::math::detail::constructors<Vector>::vector16_pointer p) noexcept {
        return ::up::math::detail::constructors<Vector>::load16(p);
    }

    template <class Vector>
    inline UPALWAYSINLINE
    Vector load16(size_t offset, typename up::math::detail::constructors<Vector>::vector16_pointer p) noexcept {
        return ::up::math::detail::constructors<Vector>::load16(offset, p);
    }

    template <class Vector>
    inline UPALWAYSINLINE
    Vector loada2(typename up::math::detail::constructors<Vector>::vector2_pointer p) noexcept {
        return ::up::math::detail::constructors<Vector>::loada2(p);
    }

    template <class Vector>
    inline UPALWAYSINLINE
    Vector loada2(size_t offset, typename up::math::detail::constructors<Vector>::vector2_pointer p) noexcept {
        return ::up::math::detail::constructors<Vector>::loada2(offset, p);
    }

    template <class Vector>
    inline UPALWAYSINLINE
    Vector loada3(typename up::math::detail::constructors<Vector>::vector3_pointer p) noexcept {
        return ::up::math::detail::constructors<Vector>::loada3(p);
    }

    template <class Vector>
    inline UPALWAYSINLINE
    Vector loada3(size_t offset, typename up::math::detail::constructors<Vector>::vector3_pointer p) noexcept {
        return ::up::math::detail::constructors<Vector>::loada3(offset, p);
    }

    template <class Vector>
    inline UPALWAYSINLINE
    Vector loada4(typename up::math::detail::constructors<Vector>::vector4_pointer p) noexcept {
        return ::up::math::detail::constructors<Vector>::loada4(p);
    }

    template <class Vector>
    inline UPALWAYSINLINE
    Vector loada4(size_t offset, typename up::math::detail::constructors<Vector>::vector4_pointer p) noexcept {
        return ::up::math::detail::constructors<Vector>::loada4(offset, p);
    }

    template <class Vector>
    inline UPALWAYSINLINE
    Vector loada8(typename up::math::detail::constructors<Vector>::vector8_pointer p) noexcept {
        return ::up::math::detail::constructors<Vector>::loada8(p);
    }

    template <class Vector>
    inline UPALWAYSINLINE
    Vector loada8(size_t offset, typename up::math::detail::constructors<Vector>::vector8_pointer p) noexcept {
        return ::up::math::detail::constructors<Vector>::loada8(offset, p);
    }

    template <class Vector>
    inline UPALWAYSINLINE
    Vector loada16(typename up::math::detail::constructors<Vector>::vector16_pointer p) noexcept {
        return ::up::math::detail::constructors<Vector>::loada16(p);
    }

    template <class Vector>
    inline UPALWAYSINLINE
    Vector loada16(size_t offset, typename up::math::detail::constructors<Vector>::vector16_pointer p) noexcept {
        return ::up::math::detail::constructors<Vector>::loada16(offset, p);
    }
}}

namespace up { namespace math { namespace detail
{
    template <class To, class From, size_t N>
    struct generic_convert_impl<To, From, N, 1>
    {
        static UPALWAYSINLINE UPPURE
        To convert(From const& v) noexcept {
            To r;
            for (size_t i = 0; i < N; ++i) {
                r.s[i] = ::up::math::convert<typename make_scalar<To>::type>(v.s[i]);
            }
            return r;
        }
    };

    template <class To, class From, size_t N>
    struct generic_convert_rte_impl<To, From, N, 1>
    {
        static UPALWAYSINLINE UPPURE
        To convert(From const& v) noexcept {
            To r;
            for (size_t i = 0; i < N; ++i) {
                r.s[i] = ::up::math::convert_rte<typename make_scalar<To>::type>(v.s[i]);
            }
            return r;
        }
    };

    template <class To, class From, size_t N>
    struct generic_convert_rtz_impl<To, From, N, 1>
    {
        static UPALWAYSINLINE UPPURE
        To convert(From const& v) noexcept {
            To r;
            for (size_t i = 0; i < N; ++i) {
                r.s[i] = ::up::math::convert_rtz<typename make_scalar<To>::type>(v.s[i]);
            }
            return r;
        }
    };

    template <class To, class From, size_t N>
    struct generic_convert_rtn_impl<To, From, N, 1>
    {
        static UPALWAYSINLINE UPPURE
        To convert(From const& v) noexcept {
            To r;
            for (size_t i = 0; i < N; ++i) {
                r.s[i] = ::up::math::convert_rtn<typename make_scalar<To>::type>(v.s[i]);
            }
            return r;
        }
    };

    template <class To, class From, size_t N>
    struct generic_convert_rtp_impl<To, From, N, 1>
    {
        static UPALWAYSINLINE UPPURE
        To convert(From const& v) noexcept {
            To r;
            for (size_t i = 0; i < N; ++i) {
                r.s[i] = ::up::math::convert_rtp<typename make_scalar<To>::type>(v.s[i]);
            }
            return r;
        }
    };

    template <class To, class From, size_t N>
    struct generic_convert_sat_impl<To, From, N, 1>
    {
        static UPALWAYSINLINE UPPURE
        To convert(From const& v) noexcept {
            To r;
            for (size_t i = 0; i < N; ++i) {
                r.s[i] = ::up::math::convert_sat<typename make_scalar<To>::type>(v.s[i]);
            }
            return r;
        }
    };

    template <class To, class From, size_t N>
    struct generic_convert_sat_rte_impl<To, From, N, 1>
    {
        static UPALWAYSINLINE UPPURE
        To convert(From const& v) noexcept {
            To r;
            for (size_t i = 0; i < N; ++i) {
                r.s[i] = ::up::math::convert_sat_rte<typename make_scalar<To>::type>(v.s[i]);
            }
            return r;
        }
    };

    template <class To, class From, size_t N>
    struct generic_convert_sat_rtz_impl<To, From, N, 1>
    {
        static UPALWAYSINLINE UPPURE
        To convert(From const& v) noexcept {
            To r;
            for (size_t i = 0; i < N; ++i) {
                r.s[i] = ::up::math::convert_sat_rtz<typename make_scalar<To>::type>(v.s[i]);
            }
            return r;
        }
    };

    template <class To, class From, size_t N>
    struct generic_convert_sat_rtn_impl<To, From, N, 1>
    {
        static UPALWAYSINLINE UPPURE
        To convert(From const& v) noexcept {
            To r;
            for (size_t i = 0; i < N; ++i) {
                r.s[i] = ::up::math::convert_sat_rtn<typename make_scalar<To>::type>(v.s[i]);
            }
            return r;
        }
    };

    template <class To, class From, size_t N>
    struct generic_convert_sat_rtp_impl<To, From, N, 1>
    {
        static UPALWAYSINLINE UPPURE
        To convert(From const& v) noexcept {
            To r;
            for (size_t i = 0; i < N; ++i) {
                r.s[i] = ::up::math::convert_sat_rtp<typename make_scalar<To>::type>(v.s[i]);
            }
            return r;
        }
    };
}}}

#if !defined(UP_NO_SIMD) && defined(UP_SIMD_NEON)
#   include <up/math/neon/vector_conversions.inl>
#elif !defined(UP_NO_SIMD) && defined(UP_SIMD_SSE_2)
#   include <up/math/sse/vector_conversions.inl>
#endif

#endif
